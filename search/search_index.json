{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Copilot Camp","text":"<p>Welcome to Copilot Camp! This is a work in progress, but some of the labs are ready for testing.</p> <p>Copilot Camp is a virtual workshop for professional developers who want to learn how to build Copilot for Microsoft 365 extensions including plugins, declarative copilots, and custom engine copilots. It all begins with hands-on labs, but over time we will add instructional material, videos, graphics, and more!</p> <p>We really appreciate your feedback!! Please use the issues list to share your comments and issues, or let us know in the \"Copilot Camp Early Testers\" chat in Microsoft Teams.</p> <p>The labs are divided into two pathways, allowing you to choose based on what you want to create.</p> <p></p>"},{"location":"#path-a-extend-copilot-for-microsoft-365","title":"Path A - Extend Copilot for Microsoft 365","text":"<p>Note: These labs require the \"Private Preview\" for Copilot for M365 extensibility. There may be some changes for \"Public Preview\" when it's available.</p> <ul> <li>Lab A0 - Prerequisites - DRAFT READY FOR TESTING</li> <li>Lab A1 - Declarative Copilot - DRAFT READY FOR TESTING</li> <li>Lab A2 - First API Plugin - DRAFT READY FOR TESTING</li> <li>Lab A3 - Enhance the API Plugin - DRAFT READY FOR TESTING</li> <li>Lab A4 - Add Adaptive Cards - DRAFT READY FOR TESTING</li> <li>Lab A5 - Add a Declarative Copilot - DRAFT READY FOR TESTING</li> <li>Lab A6 - Add authentication - COMING SOON</li> </ul>"},{"location":"#path-b-build-your-own-copilot","title":"Path B - Build your own Copilot","text":"<ul> <li>Lab B0 - Prerequisites - DRAFT READY FOR TESTING</li> <li>Lab B1 - Custom Engine Copilot - DRAFT READY FOR TESTING</li> <li>Lab B2 - Bring your data (RAG) - DRAFT READY FOR TESTING</li> <li>Lab B3 - Powered by AI Kit - COMING SOON</li> <li>Lab B4 - Add actions - COMING SOON</li> <li>Lab B5 - Add authentication - COMING SOON</li> </ul>"},{"location":"#its-still-early-so-whats-next","title":"It's still early ... so what's next?","text":"<p>We're starting with the hands-on labs because those require the most testing. We expect them to require some updates as the products move to Public Preview.</p> <p>We aspire to release this in mid-September 2024 to coincide with the Microsoft AI Tour. Between now and then we want to add a lot of cool fetures remininscent of App Camp, including:</p> <ul> <li>Lots of videos to help people choose the right approach, understand the concepts, and provide a walk-through of each lab</li> <li>Written details and explanations users can open up to view if they wish</li> <li>Fun branding and graphics</li> <li>\"Train the trainer\" decks so our field and MVPs can deliver the workshop in person</li> <li>Possibly alternate instructions for in-person labs if we are able to provide pre-configured tenants for users</li> </ul> <p>Labs are only useful if students understand what they did! And we aspire to make this a comprehensive experience where professional devs can learn everything they need to build world-class, production level Copilot solutions.</p> <p>Do you have ideas? Please let us know in the Teams chat or in the Github issues!</p>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>This project has adopted the Microsoft Open Source Code of Conduct.</p> <p>Resources:</p> <ul> <li>Microsoft Open Source Code of Conduct</li> <li>Microsoft Code of Conduct FAQ</li> <li>Contact opencode@microsoft.com with questions or concerns</li> </ul>"},{"location":"includes/a-path-links/","title":"A path links","text":"<ul> <li>Lab A0 - Prerequisites - DRAFT READY FOR TESTING</li> <li>Lab A1 - Declarative Copilot - DRAFT READY FOR TESTING</li> <li>Lab A2 - First API Plugin - DRAFT READY FOR TESTING</li> <li>Lab A3 - Enhance the API Plugin - DRAFT READY FOR TESTING</li> <li>Lab A4 - Add Adaptive Cards - DRAFT READY FOR TESTING</li> <li>Lab A5 - Add a Declarative Copilot - DRAFT READY FOR TESTING</li> <li>Lab A6 - Add authentication - COMING SOON</li> </ul>"},{"location":"includes/b-path-links/","title":"B path links","text":"<ul> <li>Lab B0 - Prerequisites - DRAFT READY FOR TESTING</li> <li>Lab B1 - Custom Engine Copilot - DRAFT READY FOR TESTING</li> <li>Lab B2 - Bring your data (RAG) - DRAFT READY FOR TESTING</li> <li>Lab B3 - Powered by AI Kit - COMING SOON</li> <li>Lab B4 - Add actions - COMING SOON</li> <li>Lab B5 - Add authentication - COMING SOON</li> </ul>"},{"location":"pages/custom-engine/","title":"Welcome to Copilot Camp's Path B: Build your own copilot","text":"<p>During Path B of the Copilot Camp, learners will develop a custom AI chatbot specifically designed to handle complex career-related tasks and workflows for a Human Resources department. The journey starts with building a basic custom engine copilot using Teams Toolkit and Azure OpenAI. Learners will then integrate Retrieval Augmented Generation (RAG) to interact with business data, apply UI enhancements to make the chatbot look and feel like a Copilot experience, enable single sign-on, and use Microsoft Graph to incorporate Microsoft 365 data. This sophisticated AI chatbot will utilize custom AI models and an orchestrator to meet the unique needs of the Human Resources department.</p> Here are the labs <ul> <li>Lab B0 - Prerequisites Set up your development environment</li> <li>Lab B1 - Build custom engine copilots Build custom engine copilots using Azure OpenAI and Teams Toolkit</li> <li>Lab B2 - Bring your data Bring your data from Azure AI Search to your app</li> <li>Lab B3 - Enhance user experience Enhance user experience with Powered by AI kit</li> <li>Lab B4 - Add actions Add actions to handle complex tasks</li> <li>Lab B5 - Add authentication Secure your solution using Entra ID authentication</li> </ul>"},{"location":"pages/custom-engine/#start-here-with-lab-b0-where-youll-set-up-development-your-environment","title":"Start here with Lab B0, where you'll set up development your environment.","text":""},{"location":"pages/custom-engine/00-prerequisites/","title":"Lab B0 - Prerequisites","text":"<p>In this lab you set up for development environment to build, test and deploy the custom engine copilot you'll develop throughout the path B.</p> Navigating the Building your own copilot labs (B Path) <ul> <li>Lab B0 - Prerequisites (\ud83d\udccd You are here)</li> <li>Lab B1 - Build custom engine copilots</li> <li>Lab B2 - Bring your data</li> <li>Lab B3 - Enhance user experience</li> <li>Lab B4 - Add actions</li> <li>Lab B5 - Add authentication</li> </ul> <p>In this lab you will learn:</p> <ul> <li>Make your developer tenant for Microsoft 365 ready</li> <li>Install and configure Teams toolkit for Visual Studio Code</li> <li>Prepare your Azure environment to create required resources</li> </ul>"},{"location":"pages/custom-engine/00-prerequisites/#exercise-1-set-up-your-microsoft-365-subscription","title":"Exercise 1: Set up your Microsoft 365 Subscription","text":"<p>To install and run your own declarative copilot, you'll need a Microsoft 365 tenant where you have administrator permission. Fortunately you can get one for free through the Microsoft 365 Developer Program! In the labs which follow, you'll also use this tenant to run Microsoft Teams where you can test this lab. You will also need Copilot License to test the app.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-1-get-a-tenant","title":"Step 1: Get a tenant","text":"<p>If you don't yet have a tenant, please join the Microsoft 365 Developer Program to get a free one. Your tenant includes 25 E5 user licenses and can be renewed as long as you keep developing!</p> <p>Select Join now to begin. Log in with any Microsoft personal or work and school account, enter your information, and select Next. You will have an opportunity to choose what kind of sandbox you want; the Instant sandbox is recommended.</p> <p>Follow the wizard and select your administrator username and password, tenant domain name, etc. The domain name you choose is just the left-most portion - for example if you enter \"Contoso\" your domain will be \"Contoso.onmicrosoft.com\".</p> <p>Remember this information as you'll need it throughout the labs! You will log in as &gt;username&lt;@&gt;domain&lt;.onmicrosoft.com with the password you chose. You'll be prompted for your phone number and then the system will set up your subscription.</p> <p>Eventually you'll be prompted to log into your new tenant. Be sure to use the new administrator credentials you just created, not the ones you used when you signed up for the developer program.</p> <p>Tip: Navigating many tenants</p> <p>Consider creating a browser profile for each tenant that will have its own favorites, stored credentials, and cookies so you can easily swtch between tenants as you work.</p> <p>You may be asked to enable multi-factor authentication (MFA)</p> <p>This is certainly a good idea! Just follow the instructions. If you really must turn off MFA, here are instructions. </p> More tips on setting up your Microsoft 365 Development Tenant! <p> Setting up your Microsoft 365 Development tenant </p>"},{"location":"pages/custom-engine/00-prerequisites/#step-2-enable-teams-application-uploads","title":"Step 2: Enable Teams application uploads","text":"<p>By default, end users can't upload applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will ensure your tenant is set up for direct uploads by Teams Toolkit.</p> <p>1\ufe0f\u20e3 Navigate to https://admin.microsoft.com/}, which is the Microsoft 365 Admin Center.</p> <p>2\ufe0f\u20e3 In the left panel of the admin center, select Show all to open up the entire navigation. When the panel opens, select Teams to open the Microsoft Teams admin center.</p> <p>3\ufe0f\u20e3 In the left of the Microsoft Teams admin center, open the Teams apps accordion. Select Setup Policies, you will see a list of App setup policies. Then, select the Global (Org-wide default) policy.</p> <p>4\ufe0f\u20e3 Ensure the first switch, Upload custom apps is turned On.</p> <p>5\ufe0f\u20e3 Be sure to scroll down and select the Save button to persist your change.</p> <p>The change can take up to 24 hours to take effect, but usually it's much faster.</p>"},{"location":"pages/custom-engine/00-prerequisites/#exercise-2-install-teams-toolkit-and-prerequisites","title":"Exercise 2: Install Teams Toolkit and prerequisites","text":"<p>You can complete these labs on a Windows, Mac, or Linux machine, but you do need the ability to install the prerequisites. If you are not permitted to install applications on your computer, you'll need to find another machine (or virtual machine) to use throughout the workshop.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-1-install-visual-studio-code","title":"Step 1: Install Visual Studio Code","text":"<p>It should be no surprise that Teams Toolkit for Visual Studio Code requires Visual Studio Code! You can download it here: Visual Studio Code.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-2-install-nodejs","title":"Step 2: Install NodeJS","text":"<p>NodeJS is a program that allows you to run JavaScript on your computer; it uses the open source \"V8\" engine, which is used in popular web browsers such as Microsoft Edge and Google Chrome. You will need NodeJS to run the web server code used throughout this workshop.</p> <p>Browse to https://nodejs.org/en/download/ and install version 18.x, the \"LTS\" (Long Term Support) version for your operating system. This lab has been tested using NodeJS version 18.16.0. If you already have another version of NodeJS installed, you may want to set up the Node Version Manager (or this variation for Microsoft Windows), which allows you to easily switch Node versions on the same computer.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-3-install-teams-toolkit","title":"Step 3: Install Teams Toolkit","text":"<p>These labs are based on Teams Toolkit version 5.0. Follow the steps as shown in the screen shot below.</p> <p>1\ufe0f\u20e3 Open Visual Studio Code and click on the Extensions toolbar button</p> <p>2\ufe0f\u20e3 Search for \"Teams\" and locate Teams Toolkit</p> <p>3\ufe0f\u20e3 Click Install</p> <p>If you have Teams Toolkit installed but hidden</p> <p>If you previously installed Teams Toolkit, and then hid it on the Visual Studio sidebar, you might wonder why you can't see it. Right-click on the left sidebar and check off Teams Toolkit to bring it back into view.</p>"},{"location":"pages/custom-engine/00-prerequisites/#exercise-3-get-an-azure-subscription","title":"Exercise 3: Get an Azure subscription","text":"<p>To complete the exercises in Path B, you'll need an Azure subscription to create resources on Azure. If you don't have Azure subscription yet, you can activate an Azure free account that offers $200 in credits which can be used within the first 30 days on most Azure services.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-1-create-an-azure-free-account","title":"Step 1: Create an Azure free account","text":"<p>Follow the steps to activate an Azure free account:</p> <p>1\ufe0f\u20e3 Navigate to Azure free account page and select Activate.</p> <p>2\ufe0f\u20e3 Login with an account of your choice, it's recommended to use the Microsoft 365 tenant account you would like to use in the exercises.</p> <p>3\ufe0f\u20e3 Check the boxes for Privacy Statement, then select Next.</p> <p>4\ufe0f\u20e3 Provide a mobile phone number for identity verification step.</p> <p>5\ufe0f\u20e3 Provide payment details for a temporary authorization. You won\u2019t be charged unless you move to pay-as-you-go pricing. Then, select Sign up.</p> <p>Tip: Managing Azure resources after 30 days</p> <p>Azure free account will be available only for 30 days. Make sure you don't have any services running in your free subscription at the end of 30 days. If you want to continue using Azure services at the end of 30 days, you must upgrade to a pay-as-you-go subscription by removing the spending limit. This allows continued use of the Azure free account and select free services for the term.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-2-obtain-access-to-create-azure-openai-service","title":"Step 2: Obtain access to create Azure OpenAI service","text":"<p>In the path B exercises, you'll need to create Azure OpenAI service and models. Before starting with the exercises, make sure you have access granted to Azure OpenAI in the desired Azure subscription and have required permissions to create Azure OpenAI resources and to deploy models. If you don't have access to Azure OpenAI, you must submit an application to access Azure OpenAI Service. To apply for access, complete this form.</p> <p>Now you are all set to create your first custom engine copilot! Proceed to create a Custom engine copilot.</p>"},{"location":"pages/custom-engine/01-custom-engine-copilot/","title":"Lab B1 - Build custom engine copilots using Azure OpenAI and Teams Toolkit","text":"<p>In this lab you will build a custom engine copilot using Teams Toolkit for Visual Studio Code. You will also utilize Azure OpenAI models in your custom engine copilot and define your first prompt.</p> Navigating the Building your own copilot labs (B Path) <ul> <li>Lab B0 - Prerequisites</li> <li>Lab B1 - Build custom engine copilots (\ud83d\udccd You are here)</li> <li>Lab B2 - Bring your data</li> <li>Lab B3 - Enhance user experience</li> <li>Lab B4 - Add actions</li> <li>Lab B5 - Add authentication</li> </ul> <p>In this lab you will learn:</p> <ul> <li>What is a custom engine copilot</li> <li>Create Azure OpenAI service and models</li> <li>Create a custom engine copilot using Teams toolkit</li> <li>Define a prompt in your custom engine copilot</li> <li>Learn how to run and test your app</li> </ul>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#introduction","title":"Introduction","text":"<p>Welcome aboard to the exciting journey of building your own custom engine copilot! In this path, you'll create a personalized copilot for Microsoft Teams using cutting-edge Azure OpenAI models. You'll be able to define specific prompts, integrate complex data, and add advanced skills to make your copilot truly unique. By using custom models and orchestration, your copilot will tackle advanced tasks, complex conversations, and workflows, delivering an exceptional, personalized experience. Let's dive in and start building your first custom engine copilot!</p>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#exercise-1-create-azure-openai-service-and-models","title":"Exercise 1: Create Azure OpenAI service and models","text":"<p>Follow the exercise or choose your own model</p> <p>This exercise particularly demonstrates how to create and utilize Azure OpenAI's GPT models in custom engine copilots. However, Custom engine copilots are not limited to using GPT models only. You can also test the lab with any other model you prefer use.</p> Choosing Between Small and Large Language Models <p>When choosing between Small Language Models (SLMs) and Large Language Models (LLMs), as well as among various GPT models, it's important to consider the specific needs of your project in terms of complexity, computational resources, and efficiency.</p> <ul> <li> <p>LLMs: Best for complex and nuanced tasks requiring deep capabilities. They have billions of parameters and excel in understanding and generating human language. GPT-4, LLaMA 2, BERT or PaLM can be examples for LLMs.  Example scenarios: Handling intricate customer inquiries, offering detailed and context-aware responses, generating high-quality articles from brief prompts, summarizing large volumes of academic papers, extracting key insights, and answering detailed questions.</p> </li> <li> <p>SLMs: Better for quick tasks with limited resources where speed and efficiency are key. They have fewer parameters and are optimized for specific tasks with lower computational needs. Phi-3 by Microsoft, ALBERT by Google or DistilBERT by HuggingFace can be examples for SLMs.  Example scenarios: Providing efficient text analysis without needing cloud resources, enabling accurate and responsive voice commands with minimal latency, smart home automation and control with natural speech.</p> </li> </ul> <p>OpenAI's GPT models are popular examples for LLMs. When choosing between OpenAI's models you may consider the following benefits:</p> <ul> <li> <p>gpt-4: The most advanced model, suitable for highly complex tasks that require extensive understanding and generation capabilities.</p> </li> <li> <p>gpt-4o: An optimized version for specific tasks, offering faster and more efficient performance in those areas.</p> </li> <li> <p>gpt-35-turbo: A balanced model that provides good performance at a lower cost, ideal for a wide range of applications.</p> </li> </ul> <p>You'll need to complete the Azure subscription pre-requisite before starting with this exercise.</p>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#step-1-create-azure-openai-service-resource","title":"Step 1: Create Azure OpenAI service resource","text":"<ol> <li>Open the browser of your choice and navigate to Azure Portal.</li> <li>Select Create a resource, then search for <code>Azure OpenAI</code>. Select the Azure OpenAI service and then Create.</li> <li>Fill out the following details and select Next:<ul> <li>Subscription: The Azure subscription for your Azure OpenAI Service</li> <li>Resource group: The Azure resource group to contain your Azure OpenAI resource. You can create a new group or use a pre-existing group.</li> <li>Region: The location of your instance.</li> <li>Name: A descriptive name for your Azure OpenAI Service resource, such as <code>MyOpenAIResource</code>.</li> <li>Pricing Tier: The pricing tier for the resource. Currently, only the <code>Standard</code> tier is available for the Azure OpenAI Service.</li> </ul> </li> <li>Select the network configuration of your choice and select Next.</li> <li>Leave the Tags section as default and select Next.</li> <li>Finally, review your Azure OpenAI service details and select Create.</li> </ol> <p>Once your Azure OpenAI service is created successfully, navigate to your resource, select Keys and Endpoint from the left side panel. Copy and save <code>KEY 1</code> and <code>Endpoint</code>that will be required later in Exercise 2.</p>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#step-2-create-a-deployment-model","title":"Step 2: Create a deployment model","text":"<p>In your Azure OpenAI service, navigate to Model deployments from the left side panel, then select Manage deployments. This will direct you to <code>Azure OpenAI Studio</code> where you can create your deployment model.</p> What is Azure OpenAI Studio? <p>Azure OpenAI Studio is a playground to explore OpenAI models like <code>gpt-35-turbo</code>, <code>gpt-4</code> or <code>Dall-e</code> that helps you craft unique prompts for your use cases, and fine-tune your models. If you prefer to use any model other than OpenAI models such as <code>Phi-3</code>, <code>Llama 3.1</code> or models from <code>HuggingFace</code>, we recommend you to use Azure AI Studio that provide a large selection of models to deploy, fine-tune and publish.</p> <p>From the Deployments tab, select Create a new deployment. Fill out the following details and select Create:</p> <ul> <li>Select a model: Select <code>gpt-35-turbo</code> or higher model.</li> <li>Model version: Auto update to default.</li> <li>Deployment type: Provisioned-Managed.</li> <li>Deployment name: Recommended to use the same name with the selected deployment model, such as <code>gpt-35-turbo</code>.</li> <li>Content Filter: Default.</li> </ul> <p>Tip: Handling no quota available message</p> <p>When you select a model, you may see No quota available message pop-up on top of the configuration page. To handle this, you have two options: 1. Select a different version or deployment type 1. Free up the resources on other deployments by requesting for more quota or adjust the existing quota</p> <p>Once your model is successfully created, you can navigate to Chat, and test your model by selecting one of the available templates in Prompt section and asking relevant questions in the chat playground.</p> <p></p>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#exercise-2-scaffold-a-custom-engine-copilot-from-template","title":"Exercise 2: Scaffold a custom engine copilot from template","text":"<p>You'll need to complete all the required pre-requisites before starting with this exercise.</p>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#step-1-use-teams-toolkit-to-create-a-new-custom-engine-copilot","title":"Step 1: Use Teams Toolkit to create a new custom engine copilot","text":"What is a custom engine copilot? <p>Custom engine copilots are chat bots built with Teams AI library that utilizes Language Model of your choice for enhanced conversational interactions. With all the UI components in the Teams AI library, you can build custom engine copilots that look and feel like a Microsoft experience while leveraging all the enhanced AI capabilities from Azure AI.</p> <ol> <li>Open Teams Toolkit on Visual Studio Code and select Create a New App &gt; Custom Engine Copilot &gt; Basic AI Chatbot.</li> <li>Select TypeScript as a programming language choice and Azure OpenAI as Large Language model of your choice.<ol> <li>Paste the Azure OpenAI key and press enter.</li> <li>Paste the Azure OpenAI endpoint and press enter. (Endpoint shouldn't include forward slash at the end of its URL.)</li> <li>Type Azure OpenAI deployment model name and press enter.</li> </ol> </li> <li>Select a folder for your project root.</li> <li>Provide a name for your project such as <code>CareerGenie</code> and press enter.</li> </ol> <p>After providing all the details mentioned above, your project will be scaffolded successfully in seconds.</p>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#step-2-understanding-the-files-in-the-app","title":"Step 2: Understanding the files in the app","text":"<p>Let's explore what's included in the custom engine copilot template. Here is the list of folders and files that are important to know:</p> <ul> <li><code>appPackage</code>: Templates for the Teams application manifest</li> <li><code>env</code>: Environment files</li> <li><code>infra</code>: Templates for provisioning Azure resources</li> <li><code>src</code>: The source code for the application</li> <li><code>teamsapp.yml</code>: The main Teams Toolkit project file that defines properties and configuration definitions.</li> <li><code>teamsapp.local.yml</code>: This overrides <code>teamsapp.yml</code> with actions that enable local execution and debugging.</li> <li><code>teamsapp.testtool.yml</code>: This overrides <code>teamsapp.yml</code> with actions that enable local execution and debugging in Teams App Test Tool.</li> </ul> <p>Diving into the application folder <code>src</code> that includes the main app files:</p> <ul> <li><code>src/index.ts</code>: Sets up the bot app server.</li> <li><code>src/adapter.ts</code>: Sets up the bot adapter.</li> <li><code>src/config.ts</code>: Defines the environment variables.</li> <li><code>src/prompts/chat/skprompt.txt</code>: Defines the prompt.</li> <li><code>src/prompts/chat/config.json</code>: Configures the prompt.</li> <li><code>src/app/app.ts</code>: Handles business logics for the Basic AI Chatbot.</li> </ul>"},{"location":"pages/custom-engine/01-custom-engine-copilot/#step-3-customize-prompt-and-test-the-app","title":"Step 3: Customize prompt and test the app","text":"<p>Prompts are essential for interacting with AI language models and directing their behavior. They serve as the inputs or questions we provide to the model to obtain specific responses. By crafting prompts carefully, we can guide the AI to generate desired outputs. Let's customize the prompt of our custom engine copilot and define the behavior of Career Genie!</p> <p>In your project folder, navigate to <code>src/prompts/chat/skprompt.txt</code> and replace the existing text with the following prompt:</p> <pre><code>You are a career specialist named \"Career Genie\" that helps Human Resources team for writing job posts.\nYou are friendly and professional.\nYou always greet users with excitement and introduce yourself first.\nYou like using emojis where appropriate.\n</code></pre> <p>To test the behavior of your app quickly, you can use Teams App Test Tool. Later in the exercise, you'll run and debug your custom engine copilot on Microsoft Teams.</p> More information about the Teams App Test Tool <p>Teams App Test Tool (or short as Test Tool) is a component integrated into Teams Toolkit. This component helps developers to debug, test, and iterate on the app design of a Teams bot application in a web-based chat environment that emulates the behavior, look, and feel of Microsoft Teams.</p> <p>Start debugging your app by selecting Run and Debug tab on Visual Studio Code and Debug in Test Tool. Teams App Test Tool will pop up on your browser and you can start chatting with your custom engine copilot right away! Some of the recommended questions you can ask to test the behavior:</p> <ul> <li>\"Can you help me write a job post for a Senior Developer role?\"</li> <li>\"What would be the list of required skills for a Project Manager role?\"</li> <li>\"Can you share a job template?\"</li> </ul> <p></p> <p>Congratulations you've successfully built your first custom engine copilot, Career Genie! To advance the skills of the Career Genie, continue with the next lab Bring your data from Azure AI Search to your app.</p>"},{"location":"pages/custom-engine/02-rag/","title":"Lab B2 - Bring your data from Azure AI Search to your app","text":"<p>In this lab you will enable Retrieval-Augmented Generation for your custom engine copilot and integrate with Azure AI Search to chat with your data.</p> Navigating the Building your own copilot labs (B Path) <ul> <li>Lab B0 - Prerequisites</li> <li>Lab B1 - Build custom engine copilots</li> <li>Lab B2 - Bring your data (\ud83d\udccd You are here)</li> <li>Lab B3 - Enhance user experience</li> <li>Lab B4 - Add actions</li> <li>Lab B5 - Add authentication</li> </ul> <p>In this lab you will learn:</p> <ul> <li>What is Retrieval-Augmented Generation (RAG)</li> <li>Setup Azure resources</li> <li>Upload your documents to Azure AI Search</li> <li>Prepare your custom engine copilot for Vector Search</li> <li>Learn how to run and test your app</li> </ul>"},{"location":"pages/custom-engine/02-rag/#introduction","title":"Introduction","text":"What is Retrieval-Augmented Generation (RAG)? <p>Retrieval-Augmented Generation (RAG) is a technique used in artificial intelligence to improve the quality of responses generated by language models. Here's a simple example to understand it better:</p> <p>Imagine you have a smart assistant that can write answers to your questions. Sometimes, this assistant might not know everything it needs to give a great answer. To help with this, RAG lets the assistant look up information from a large collection of documents, videos, images similar to how you might search the internet for answers. After finding the relevant information, the assistant then uses this data to write a better, more accurate response.</p> <p>So, RAG combines two steps:</p> <ul> <li>Retrieval: Finding relevant information from a big pool of data.</li> <li>Generation: Using that information to create a detailed and accurate response.</li> </ul> <p>This way, RAG helps in providing more informed and useful answers, making it very effective for tasks like answering questions, writing articles, and assisting with research.</p> <p>In the previous exercise, you learned how to create a custom engine copilot and customize the prompt for defining the behavior of the AI chatbot, Career Genie. In this exercise, you'll apply vector search to a collection of resumes to find the best candidate for the job requirements. To enable vector search in Career Genie, you'll use the \"Azure OpenAI Studio on your data\" feature to:</p> <ul> <li>Create an index on Azure AI Search.</li> <li>Generate vector embeddings for the resumes (PDF documents).</li> <li>Upload the data in chunks to Azure AI Search.</li> </ul> <p>Finally, you'll integrate your custom engine copilot with Azure AI Search to chat with your data and obtain the best results.</p> <p>Benefits of using Vector Search</p> <p>Vector search is an advanced technique used to find information quickly and accurately based on its meaning rather than just matching exact words. Unlike traditional text-based search, which relies on exact keyword matches, vector search uses numeric vectors to find content that is similar to your query. This enables Vector search to handle:</p> <ul> <li>Semantic or conceptual similarity: Matching concepts that are similar in meaning even if they use different words (e.g., \"pastry\" and \"croissant\").</li> <li>Multilingual content: Finding equivalent content across different languages (e.g., \"pastry\" in English and \"geb\u00e4ck\" in German).</li> <li>Multiple content types: Searching across different formats (e.g., \"pastry\" in text and an image of a pastry).</li> </ul> <p>Here is how vector search works:</p> <ol> <li>Converting text to vectors: Imagine turning words or sentences into a series of numbers (a vector) that captures the essence or meaning of that text. This is done using techniques like word embeddings or deep learning models.</li> <li>Storing vectors: These vectors are stored in a special database designed to handle them efficiently.</li> <li>Searching with vectors: When you search for something, your query is also converted into a vector. The search system then looks for vectors in the database that are close to your query vector in terms of meaning, not just exact word matches.</li> </ol> <p>For example, if you search for \"how to bake a cake\" the system can find documents about \"cake recipes\" or \"baking tips\" even if they don't have the exact words \"how to bake a cake\" or even if the recipes are written in another language. This makes vector search powerful for finding relevant information based on context and meaning, especially in large datasets.</p> <p>In summary, vector search improves the search process by focusing on the meaning behind the words, enabling more accurate and relevant results.</p>"},{"location":"pages/custom-engine/02-rag/#exercise-1-setup-azure-resources","title":"Exercise 1: Setup Azure Resources","text":"<p>You'll need to complete the Azure subscription pre-requisite before starting with this exercise.</p>"},{"location":"pages/custom-engine/02-rag/#step-1-create-azure-ai-search-service-resource","title":"Step 1: Create Azure AI Search service resource","text":"What is Azure AI Search? <p>Azure AI Search (formerly known as \"Azure Cognitive Search\") provides secure information retrieval at scale over user-owned content in traditional and generative AI search applications.When you create a search service, you work with the following capabilities:</p> <ul> <li>A search engine for vector search, full text and hybrid search over a search index</li> <li>Rich indexing with integrated data chunking and vectorization</li> <li>Rich query syntax for vector queries, text search, hybrid queries</li> <li>Integration with Azure AI services and Azure OpenAI</li> </ul> <ol> <li>Open the browser of your choice and navigate to Azure Portal.</li> <li>Select Create a resource, then search for <code>Azure AI Search</code>. Select the Azure AI Search service and then Create.</li> <li>Fill out the following details and select Review + Create:<ul> <li>Subscription: The Azure subscription for your Azure OpenAI Service</li> <li>Resource group: Select the pre-existing resource group you created earlier for Azure OpenAI service.</li> <li>Name: A descriptive name for your Azure OpenAI Service resource, such as <code>copilotcamp-ai-search</code>.</li> <li>Location: The location of your instance.</li> <li>Pricing Tier: Standard</li> </ul> </li> </ol> <p>Once your Azure AI Search service resource is created successfully, navigate to your resource, In Overview, copy and save <code>Url</code>. Then, navigate to Keys, copy and save <code>Primary admin key</code>. Both of them will be required later in the following exercises.</p>"},{"location":"pages/custom-engine/02-rag/#step-2-create-a-storage-account-service-resource","title":"Step 2: Create a storage account service resource","text":"<ol> <li>Open the browser of your choice and navigate to Azure Portal.</li> <li>Select Create a resource, then search for <code>Storage Account</code>. Select the Storage Account service and then Create.</li> <li>Fill out the following details and select Review, then Create:<ul> <li>Subscription: The Azure subscription for your Azure OpenAI Service</li> <li>Resource group: Select the pre-existing resource group you created earlier for Azure OpenAI service.</li> <li>Name: A descriptive name for your Azure OpenAI Service resource, such as <code>copilotcampstorage</code>.</li> <li>Region: The location of your instance.</li> <li>Performance: Standard</li> <li>Redundancy: Geo-redundant storage (GRS)</li> </ul> </li> </ol>"},{"location":"pages/custom-engine/02-rag/#step-3-create-a-text-embedding-ada-002-model","title":"Step 3: Create a <code>text-embedding-ada-002</code> model","text":"What does <code>text-embedding-ada-002</code> do? <p>The <code>text-embedding-ada-002</code> model on Azure OpenAI converts text into numeric vectors that represent the meaning of the text. This allows for vector search, where instead of matching exact words, the search finds text with similar meanings. It works with multiple languages and different content types, making it useful for comparing text across languages and formats. When used with Azure AI Search, it improves search results by finding the most relevant and contextually accurate information. This model is perfect for creating advanced search solutions and applications that need to understand natural language.</p> <p>Open Azure OpenAI Studio in your browser, then select Deployments. Select Create a new deployment. Fill out the following details and select Create:</p> <ul> <li>Select a model: <code>text-embedding-ada-002</code>.</li> <li>Model version: Default.</li> <li>Deployment type: Standard.</li> <li>Deployment name: Recommended to use a memorable name, such as <code>text-embeddings</code>.</li> <li>Content Filter: Default.</li> </ul> <p>Tip: Handling no quota available message</p> <p>When you select a model, you may see No quota available message pop-up on top of the configuration page. To handle this, you have two options: 1. Select a different version or deployment type 1. Free up the resources on other deployments by requesting for more quota or adjust the existing quota</p>"},{"location":"pages/custom-engine/02-rag/#exercise-2-upload-your-documents-to-azure-ai-search-using-azure-openai-studio","title":"Exercise 2: Upload your documents to Azure AI Search using Azure OpenAI Studio","text":"<p>For this exercise, download fictitious_resumes.zip and unzip the folder.</p>"},{"location":"pages/custom-engine/02-rag/#step-1-upload-your-documents-to-azure-ai-search","title":"Step 1: Upload your documents to Azure AI Search","text":"<ol> <li> <p>Open Azure OpenAI Studio in your browser, then select Chat playground. In the Setup section, select Add your data tab and then Add a data source.</p> <p></p> </li> <li> <p>Select Upload files (preview), then fill the details as the following and select Next:</p> <ul> <li>Subscription: Select the subscription you created your Azure resources.</li> <li>Select Azure Blob storage resource: Select your storage resource, <code>copilotcampstorage</code>. (You'll see a message Azure OpenAI needs your permission to access this resource, select Turn on CORS.)</li> <li>Select Azure AI Search resource: Select your Azure AI Search resournce, <code>copilotcamp-ai-search</code>.</li> <li>Enter the index name: Index name, such as <code>resumes</code>.</li> <li>Select the box for Add vector search to this search resource.</li> <li>Select an embedding model: Select your text-embedding-ada-002 model, <code>text-embeddings</code>.</li> </ul> <p></p> </li> <li> <p>Select Browse for a file and select the pdf documents from the <code>resumes</code> folder. Then, select Upload files and Next.</p> </li> <li>Select Search type as <code>Vector</code> and chunk size as <code>1024(Default)</code>, then Next.</li> <li>Select <code>API Key</code> as Azure resource authentication type, then Next.</li> </ol>"},{"location":"pages/custom-engine/02-rag/#step-2-test-your-data-on-azure-openai-studio","title":"Step 2: Test your data on Azure OpenAI Studio","text":"<p>Once your data  ingestion is completed, use Chat playground to ask questions about your data.</p> <p>Tip: Making the most out of your data</p> <p>Review your dataset before asking questions testing the vector search. Go through the <code>resumes</code> folder and recognize the resumes provided in different languages with diverse professions, years of experience, skills and more. Start chatting with your data by asking questions to find out the right candidate for a skill, language, profession, years of experience and other categories. Try to test out the combination of requirements to challenge the search experience!</p> <p></p>"},{"location":"pages/custom-engine/02-rag/#step-3-sneak-peek-to-your-index-on-azure-ai-search","title":"Step 3: Sneak peek to your index on Azure AI Search","text":"<p>To understand more about your dataset and explore more, select resumes from the Add your data section of the Chat playground. This will redirect you to your resumes index on Azure AI Search.</p> <p></p> <p>First, let's include the vector content in our data. Select Fields tab in your Resumes index page, then check the box for contentVector, finally select Save.</p> <p></p> <p>Go back to Search explorer tab, select Query options in your Resumes index page and then change the API version as <code>2023-11-01</code>, then select Close. To view your data, press Search.</p> <p>Tip: Numeric vectors for each pdf document</p> <p>When scrolling through your data, recognize that each document has <code>contentVector</code> parameter that contains the numeric vectors of the pdf document. These numeric vectors will be used for Vector Search to identify the best matching results.</p> <p></p>"},{"location":"pages/custom-engine/02-rag/#exercise-3-integrate-your-app-with-azure-ai-search","title":"Exercise 3: Integrate your app with Azure AI Search","text":"<p>For this exercise, ensure that you obtain Azure OpenAI text embedding deployment name and Azure AI Search key and endpoint.</p>"},{"location":"pages/custom-engine/02-rag/#step-1-configure-environment-variables","title":"Step 1: Configure environment variables","text":"<p>In your Career Genie project, navigate to <code>env/.env.local.user</code> and paste the following environment variables:</p> <pre><code>AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME='&lt;Your-Text-Embedding-Model-Name&gt;'\nSECRET_AZURE_SEARCH_KEY='&lt;Your-Azure-AI-Search-Key&gt;'\nAZURE_SEARCH_ENDPOINT='&lt;Your-Azure-AI-Search-Endpoint&gt;'\n</code></pre> <p>Open <code>teamsapp.local.yml</code> and add the following snippet at the bottom of the file, under <code>uses: file/createOrUpdateEnvironmentFile</code>:</p> <pre><code>AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME: ${{AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME}}\nAZURE_SEARCH_KEY: ${{SECRET_AZURE_SEARCH_KEY}}\nAZURE_SEARCH_ENDPOINT: ${{AZURE_SEARCH_ENDPOINT}}\n</code></pre> <p>Navigate to <code>src/config.ts</code> and add the following snippet inside <code>config</code>:</p> <pre><code>azureOpenAIEmbeddingDeploymentName: process.env.AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME,\nazureSearchKey: process.env.AZURE_SEARCH_KEY,\nazureSearchEndpoint: process.env.AZURE_SEARCH_ENDPOINT\n</code></pre>"},{"location":"pages/custom-engine/02-rag/#step-2-configure-azure-ai-search-in-your-source-code","title":"Step 2: Configure Azure AI Search in your source code","text":"<p>Open <code>src/prompts/chat/config.json</code> in your project, then add <code>data_sources</code> inside the <code>completion</code> brackets:</p> <pre><code>\"data_sources\": [\n{\n    \"type\": \"azure_search\",\n    \"parameters\": {\n        \"endpoint\": \"$searchEndpoint\",\n        \"index_name\": \"resumes\",\n        \"authentication\": {\n            \"type\": \"api_key\",\n            \"key\": \"$searchApiKey\"\n        },\n        \"query_type\":\"vector\",\n        \"in_scope\": true,\n        \"strictness\": 3,\n        \"top_n_documents\": 5,\n        \"embedding_dependency\": {\n        \"type\": \"deployment_name\",\n        \"deployment_name\": \"text-embeddings\"\n        }\n    }\n}\n]\n</code></pre> <p>Open <code>src/prompts/chat/skprompt.txt</code> and add the following line in your prompt:</p> <pre><code>Use the context provided in the `&lt;context&gt;&lt;/context&gt;` tags as the source for your answers.\n</code></pre> <p>Open the terminal in Visual Studio Code, and run the following script from the project root:</p> <pre><code>npm install fs\n</code></pre> <p>Go to <code>src/app/app.ts</code> and add the following parameter in your  <code>OpenAIModel</code>:</p> <pre><code>azureApiVersion: '2024-02-15-preview'\n</code></pre> <p>Add the following import on top of the <code>src/app/app.ts</code> file:</p> <pre><code>import fs from 'fs';\n</code></pre> <p>In <code>src/app/app.ts</code>, replace the <code>defaultPrompt</code> inside the <code>ActionPlanner</code> with the following code snippet:</p> <pre><code>defaultPrompt: async () =&gt; {\n    const template = await prompts.getPrompt('chat');\n    const skprompt = fs.readFileSync(path.join(__dirname, '..', 'prompts', 'chat', 'skprompt.txt'));\n\n    const dataSources = (template.config.completion as any)['data_sources'];\n\n    dataSources.forEach((dataSource: any) =&gt; {\n        if (dataSource.type === 'azure_search') {\n        dataSource.parameters.authentication.key = config.azureSearchKey;\n        dataSource.parameters.endpoint = config.azureSearchEndpoint;\n        dataSource.parameters.role_information = `${skprompt.toString('utf-8')}`;\n        }\n    });\n\n    return template;\n}\n</code></pre>"},{"location":"pages/custom-engine/02-rag/#step-3-debug-your-app-and-chat-with-your-data","title":"Step 3: Debug your app and chat with your data","text":"<p>Let's test Career Genie on Teams this time. Start debugging your app by selecting Run and Debug tab on Visual Studio Code and Debug in Teams (Edge) or Debug in Teams (Chrome). Microsoft Teams will pop up on your browser. Once your app details show up on Teams, select Add and start chatting with your app.</p> <p>Tip: Asking questions about your data</p> <p>Ensure your questions are related to your dataset. Go through pdf documents in the <code>resumes</code> folder to understand more about your data. Challenge your custom engine copilot by combining requirements and asking complex questions!</p> <p></p>"},{"location":"pages/custom-engine/03-powered-by-ai/","title":"B3 - Enhance user experience with Powered by AI kit","text":"Navigating the Building your own copilot labs (B Path) <ul> <li>Lab B0 - Prerequisites</li> <li>Lab B1 - Build custom engine copilots</li> <li>Lab B2 - Bring your data</li> <li>Lab B3 - Enhance user experience (\ud83d\udccd You are here)</li> <li>Lab B4 - Add actions</li> <li>Lab B5 - Add authentication</li> </ul>"},{"location":"pages/custom-engine/03-powered-by-ai/#work-in-progress","title":"WORK IN PROGRESS","text":""},{"location":"pages/custom-engine/04-actions/","title":"B4 - Add actions to handle complex tasks","text":"Navigating the Building your own copilot labs (B Path) <ul> <li>Lab B0 - Prerequisites</li> <li>Lab B1 - Build custom engine copilots</li> <li>Lab B2 - Bring your data</li> <li>Lab B3 - Enhance user experience</li> <li>Lab B4 - Add actions (\ud83d\udccd You are here)</li> <li>Lab B5 - Add authentication</li> </ul>"},{"location":"pages/custom-engine/04-actions/#work-in-progress","title":"WORK IN PROGRESS","text":""},{"location":"pages/custom-engine/05-authentication/","title":"B5 - Secure your solution using Entra ID authentication","text":"Navigating the Building your own copilot labs (B Path) <ul> <li>Lab B0 - Prerequisites</li> <li>Lab B1 - Build custom engine copilots</li> <li>Lab B2 - Bring your data</li> <li>Lab B3 - Enhance user experience</li> <li>Lab B4 - Add actions</li> <li>Lab B5 - Add authentication (\ud83d\udccd You are here)</li> </ul>"},{"location":"pages/custom-engine/05-authentication/#work-in-progress","title":"WORK IN PROGRESS","text":""},{"location":"pages/extend-m365-copilot/","title":"Welcome to Copilot Camp's Path A1: Extend Copilot for Microsoft 365","text":"<p>During Path A of the Copilot Camp, learners will construct a customised assistant tailored for a Human Resource department. The process will begin with the creation of a basic declarative Copilot and progress towards developing fully skilled assistant. This advanced assistant will be equipped with security features, including authentication mechanism linked to the Microsoft 365 tenant to get orgnaisational data.</p> Here are the labs <ul> <li>Lab A0 - Prerequisites Set up your development environment</li> <li>Lab A1 - Declarative Copilot Customize Copilot for Microsoft 365 the easy way with a simple declarative copilot</li> <li>Lab A2 - First API Plugin Set up a local API and use it as a Copilot API plugin</li> <li>Lab A3 - Enhance the API Plugin Add more resources to the API and the Copilot metadata to learn how Copilot API plugins work</li> <li>Lab A4 - Add Adaptive Cards Add adaptive cards for an improved user experience</li> <li>Lab A5 - Add a Declarative Copilot Add a declarative copilot to the API plugin for a more complete user experience</li> <li>Lab A6 - Add authentication Secure your solution using Entra ID authentication</li> </ul>"},{"location":"pages/extend-m365-copilot/#start-here-with-lab-00-where-youll-set-up-development-your-environment","title":"Start here with Lab 00, where you'll set up development your environment.","text":""},{"location":"pages/extend-m365-copilot/00-prerequisites/","title":"Lab A0 - Prerequisites","text":"<p>In this lab, you will set up the development environment to build, test, and deploy the plugins that will extend the capabilities of Copilot for Microsoft 365.</p> Navigating the Extending Copilot labs (A Path) <ul> <li>Lab A0 - Prerequisites (\ud83d\udccdYou are here)</li> <li>Lab A1 - Declarative Copilot</li> <li>Lab A2 - First API Plugin</li> <li>Lab A3 - Enhance the API Plugin </li> <li>Lab A4 - Add Adaptive Cards</li> <li>Lab A5 - Add a Declarative Copilot</li> <li>Lab A6 - Add authentication</li> </ul> <p>In this lab you will learn:</p> <ul> <li>How to set up your developer tenant for Microsoft 365</li> <li>How to install and configure Teams toolkit for Visual Studio Code</li> </ul>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#exercise-1-set-up-your-microsoft-365-subscription","title":"Exercise 1: Set up your Microsoft 365 Subscription","text":"<p>To install and run your own declarative copilot, you'll need a Microsoft 365 tenant where you have administrator permission. Fortunately you can get one for free through the Microsoft 365 Developer Program! In the labs which follow, you'll also use this tenant to run Microsoft Teams where you can test this lab. You will also need Copilot License to test the app.</p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#step-1-get-a-tenant","title":"Step 1: Get a tenant","text":"<p>If you don't yet have a tenant, please join the Microsoft 365 Developer Program to get a free one. Your tenant includes 25 E5 user licenses and can be renewed as long as you keep developing!</p> <p>Select \"Join now\" to begin. Log in with any Microsoft personal or work and school account, enter your information, and select \"Next\". You will have an opportunity to choose what kind of \"sandbox\" you want; the \"Instant sandbox\" is recommended.</p> <p>Follow the wizard and select your administrator username and password, tenant domain name, etc. The domain name you choose is just the left-most portion - for example if you enter \"Contoso\" your domain will be \"Contoso.onmicrosoft.com\".</p> <p>Remember this information as you'll need it throughout the labs! You will log in as &gt;username&lt;@&gt;domain&lt;.onmicrosoft.com with the password you chose. You'll be prompted for your phone number and then the system will set up your subscription.</p> <p>Eventually you'll be prompted to log into your new tenant. Be sure to use the new administrator credentials you just created, not the ones you used when you signed up for the developer program.</p> <p>Tip: Navigating many tenants</p> <p>Consider creating a browser profile for each tenant that will have its own favorites, stored credentials, and cookies so you can easily swtch between tenants as you work.</p> <p>You may be asked to enable multi-factor authentication (MFA)</p> <p>This is certainly a good idea! Just follow the instructions. If you really must turn off MFA, here are instructions. </p> More tips on setting up your Microsoft 365 Development Tenant! <p> Setting up your Microsoft 365 Development tenant </p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#step-2-enable-teams-application-uploads","title":"Step 2: Enable Teams application uploads","text":"<p>By default, end users can't upload applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will ensure your tenant is set up for direct uploads by Teams Toolkit. a. Navigate to https://admin.microsoft.com/}, which is the Microsoft 365 Admin Center. b. In the left panel of the admin center, select \"Show all\" to open up the entire navigation. When the panel opens, select Teams to open the Microsoft Teams admin center. c. In the left of the Microsoft Teams admin center, open the Teams apps accordion 1\ufe0f\u20e3 and select Setup Policies 2\ufe0f\u20e3. You will see a list of App setup policies. Select the Global (Org-wide default) policy 3\ufe0f\u20e3.</p> <p></p> <p>d. Ensure the first switch, \"Upload custom apps\" is turned On.</p> <p></p> <p>e. Be sure to scroll down and select the \"Save\" button to persist your change.</p> <p></p> <p>The change can take up to 24 hours to take effect, but usually it's much faster.</p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#exercise-2-install-teams-toolkit-and-prerequisites","title":"Exercise 2: Install Teams Toolkit and prerequisites","text":"<p>You can complete these labs on a Windows, Mac, or Linux machine, but you do need the ability to install the prerequisites. If you are not permitted to install applications on your computer, you'll need to find another machine (or virtual machine) to use throughout the workshop.</p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#step-1-install-visual-studio-code","title":"Step 1: Install Visual Studio Code","text":"<p>It should be no surprise that Teams Toolkit for Visual Studio Code requires Visual Studio Code! You can download it here: Visual Studio Code.</p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#step-2-install-nodejs","title":"Step 2: Install NodeJS","text":"<p>NodeJS is a program that allows you to run JavaScript on your computer; it uses the open source \"V8\" engine, which is used in popular web browsers such as Microsoft Edge and Google Chrome. You will need NodeJS to run the web server code used throughout this workshop.</p> <p>Browse to https://nodejs.org/en/download/ and install version 20.x, the \"LTS\" (Long Term Support) version for your operating system. This lab has been tested using NodeJS version LTS.</p> If you need more than one version of NodeJS <p>Browse to https://nodejs.org/en/download/ and install the \"LTS\" (Long Term Support) version for your operating system. This lab has been tested using NodeJS version 14.17.4 and 16.14.0. If you already have another version of NodeJS installed, you may want to set up the Node Version Manager (or this variation for Microsoft Windows), which allows you to easily switch Node versions on the same computer.</p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#step-3-install-teams-toolkit","title":"Step 3: Install Teams Toolkit","text":"<p>These labs are based on the latest general available version of Teams Toolkit. Follow the steps as shown in the screen shot below.</p> <p>1\ufe0f\u20e3 Open Visual Studio Code and click on the Extensions toolbar button</p> <p>2\ufe0f\u20e3 Search for \"Teams\" and locate Teams Toolkit</p> <p>3\ufe0f\u20e3 Click \"Install\"</p> <p></p> <p>If you have Teams Toolkit installed but hidden</p> <p>If you previously installed Teams Toolkit, and then hid it on the Visual Studio sidebar, you might wonder why you can't see it. Right-click on the left sidebar and check off Teams Toolkit to bring it back into view.</p> <p>Now you are all set to create your first plugin. Proceed to create a Declarative Copilot or  an API plugin/skillto it.</p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/","title":"Lab A1 - Customise Copilot by building a declarative copilot","text":"<p>In this lab you will build a declarative copilot using Teams Toolkit for Visual Studio Code. This tool is not mandatory for you to create a declarative copilot but it makes it so much easier to scaffold, package and deploy your app. </p> Navigating the Extending Copilot labs (A Path) <ul> <li>Lab A0 - Prerequisites</li> <li>Lab A1 - Declarative Copilot (\ud83d\udccdYou are here)</li> <li>Lab A2 - First API Plugin</li> <li>Lab A3 - Enhance the API Plugin </li> <li>Lab A4 - Add Adaptive Cards</li> <li>Lab A5 - Add a Declarative Copilot</li> <li>Lab A6 - Add authentication</li> </ul> <p>In this lab you will learn:</p> <ul> <li>What is a declarative copilot for Microsoft 365</li> <li>Install Teams toolkit CLI</li> <li>Create a basic declarative copilot using Teams toolkit CLI</li> <li>Customise the basic app to create the geo locator game</li> <li>Learn how to run and test your app</li> </ul>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#introduction","title":"Introduction","text":"<p>Welcome on board to building your own declarative copilot! This is the easiest way to customise Copilot for Microsoft 365 by simply declaring instructions or by adding skills and knowledge to craft your own Copilot with the power of everything you like about Copilot for Microsoft 365. These copilots enhance collaboration, boost productivity, and streamline workflows and most importantly they tailor your Copilot to automate complex tasks and create consistent, personalised experiences. Let's dive in and make your Copilot work magic!</p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#anatomy-of-the-app-package","title":"Anatomy of the app package","text":"<p>You will see as we develop more and more extensions to Copilot,  that in the end what you will build is collection of few file in a zip file which we will refer to has an <code>app package</code> that you will  then install and use. So it's important you have a basic understanding of what the app package consists of. The app package of a declarative copilot is similar to a Teams app if you have built one before with additonal elements. See the table to see all the core elements. You will also see that the app deployment process is very similar to deploying a teams app. </p> Element Description App manifest Describes app configuration, capabilities, required resources, and important attributes. App icons Requires a color and outline icon for your declarative copilot. Declarative copilot manifest Describes copilot configuration, required fields, capabilities, conversation starters, and actions. Plugin manifest (Optional) Describes plugin configuration, required fields, and capabilities. <p>In this lab we will have not have the plugin manifest but you can find it in more advanced labs in copilot camp.</p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#exercise-1-scaffold-a-declarative-copilot-from-template","title":"Exercise 1: Scaffold a declarative copilot from template","text":"<p>You can use just an editor to create a declarative copilot if you know the structure of the files in the app package mentioned above. But things are easier if you use a tool like Teams Toolkit to not only create these files for you but also help you deploy and publish your app.  So to keep things as simple as possible we will install <code>Teams Toolkit CLI</code> to create declarative copilot with a base template for the app.</p> <p>Warning: The prerequisites are currently quite extensive, but this will change with the public preview of Declarative Copilots</p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-1-software-pre-requisites","title":"Step 1: Software Pre-Requisites","text":"<ul> <li>Install Teams Toolkit</li> </ul> <pre><code>npm i -g @microsoft/teamsapp-cli@3.0.1-rc-hotfix.1 \n</code></pre> <ul> <li>Download VSIX from Download Teams Toolkit for declartive copilot </li> <li>Unzip the downloaded zip and make sure VSIX file is in the folder </li> <li>Open Visual Studio Code </li> <li>Click \"View\" -&gt; \"Extensions\" </li> <li>Click \"...\" and \"Install from VSIX\" </li> <li>Set these Environment Variables (Refer to this website)    </li> </ul> <pre><code>\"TEAMSFX_DECLARATIVE_COPILOT\" = \"true\"\n\n\"API_COPILOT_PLUGIN\" = \"true\"\n</code></pre> <ul> <li>Run the following steps when opening a project in Visual Studio Code (These steps are not required for future use) </li> <li>In vscode command-palette: configure runtime argument (Ctrl+Shift+P) </li> <li>Add a new property: \"enable-proposed-api\": [\"teamsdevapp.ms-teams-vscode-extension\"] </li> <li>Restart Visual Studio Code </li> </ul>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-2-environment-pre-requisites","title":"Step 2: Environment Pre-Requisites","text":"<ul> <li>You need to be on the private preview tenant </li> <li>Your mailbox needs to be in SDFv2</li> <li>You will need to turn on specific flights to get access to all the features </li> <li>Access Office chat </li> <li>Once Office chat is available, click on the \u2026 menu  </li> <li>To persist the changes between browser sessions, enable \"Use local storage\"</li> </ul>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-3-use-teams-toolkit-cli-to-create-a-new-app","title":"Step 3: Use Teams Toolkit CLI to create a new app","text":"<p>Go to your terminal of choice and type <code>teamsapp new</code> and select Enter. </p> <p></p> Confused if you are really creating a teams app? <p>While it may appear that this command is used to create a new Teams application, it\u2019s important to note that the process of packaging a declarative copilot shares similarities with that of a Teams app as mentioned in the introduction. So in the coming steps it will be a lot clear as you choose options to scaffold the base app. </p> <p>Next, you can select the type of project you want to create. Select <code>Declarative Copilot</code> as shown in the screen and select Enter. Note that <code>Declarative Copilot</code> is the default new project option auto selected, so you can just select Enter.</p> <p></p> <p>Next, you will be asked to choose the type of declarative copilot. Choose <code>Basic Declarative Copilot</code> and select Enter. </p> <p></p> <p>Next, type in the directory where the project folder has to be created.</p> <p></p> <p>Next, give it an application name <code>Geo Locator Game</code> and select Enter. </p> <p></p> <p>The project will be created in a few seconds in the folder you mentioned with indication in the terminal that it is done as shown below. </p> <p></p> <p>Congratulations! You have successfully set up the base application! Now, proceed to examine the files contained within to be able to customise it to make the geo locator game app. </p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-4-understanding-the-files-in-the-app","title":"Step 4: Understanding the files in the app","text":"<p>Here's how the base project looks like: </p> Folder/File Contents <code>.vscode</code> VSCode files for debugging <code>appPackage</code> Templates for the Teams application manifest, the GPT manifest, and the API specification <code>env</code> Environment files <code>appPackage/color.png</code> Teams application logo image <code>appPackage/outline.png</code> Teams application logo outline image <code>appPackage/declarativeCopilot.json</code> Defines the behaviour and configurations of the declarative copilot. <code>appPackage/manifest.json</code> Teams application manifest that defines metadata for your declarative copilot. <code>teamsapp.yml</code> Main Teams Toolkit project file. The project file defines two primary things: Properties and configuration Stage definitions. <p>In this lab, your main focus will be the  <code>declarativeCopilot.json</code> file located within the <code>appPackage</code> directory and it will also be where majority of the modifications to tailor your declarative copilot to specific requirements happen.  Let's look at it's nodes:</p> <pre><code>{\n    \"name\": \"Teams Toolkit declarative copilot\",\n    \"description\": \"Declarative copilot created with Teams Toolkit\",\n    \"instructions\": \"You are a declarative copilot and were created with Team Toolkit. You should start every response and answer to the user with \\\"Thanks for using Teams Toolkit to create your declarative copilot!\\\\n\\\" and then answer the questions and help the user.\"\n}\n</code></pre> <ul> <li>The <code>name</code> key represents the name of the declarative copilot.</li> <li>The <code>description</code> provides a description.</li> <li>The <code>instructions</code> holds directives which will determine the operational behavior of this Copilot.</li> </ul> <p>Another important file is the <code>appPackage/manifest.json</code> file, which contains crucial metadata, including the package name, the developer\u2019s name, and references to the copilot extensions utilised by the application. The following section from the manifest.json file illustrates these details:</p> <pre><code>\"copilotExtensions\": {\n        \"declarativeCopilots\": [            \n            {\n                \"id\": \"declarativeCopilot\",\n                \"file\": \"declarativeCopilot.json\"\n            }\n        ]\n    },\n</code></pre> <p>You could also update the logo files <code>color.png</code> and <code>outline.png</code> to make it match your application's brand. In today's lab you will change  color.png file for it to stand out. </p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#exercise-2-update-with-instructions-for-geo-locator-game","title":"Exercise 2: Update with instructions for Geo Locator game","text":""},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-1-update-necessary-files","title":"Step 1: Update necessary files","text":"<p>First we will do the easy bit which is replacing the logo. Copy the image located here and replace it with the image of same name in the folder <code>appPackage</code> in your base project. </p> <p>Next, go to the file <code>manifest.json</code> in the folder <code>appPackage</code> in your base project and find the node copilotExtensions. Update the id value of the declarativeCopilots array's first entry from <code>declarativeCopilot</code> to <code>dcGeolocator</code> to make this ID unique.</p> <pre>\n \"copilotExtensions\": {\n        \"declarativeCopilots\": [            \n            {\n                \"id\": \"dcGeolocator\",\n                \"file\": \"declarativeCopilot.json\"\n            }\n        ]\n    },\n\n</pre> <p>Next, go to the file <code>declarativeCopilot.json</code>. Copy the script provided below and use it to overwrite the existing contents of the file.</p> <pre><code>{\n    \"$schema\": \"https://aka.ms/json-schemas/copilot-extensions/v1.0/declarative-copilot.schema.json\",\n    \"name\": \"Geo Locator Game (declarative copilot)\",\n    \"description\": \"This a Geo Locator Game declarative copilot\", \n    \"instructions\": \"You are an enthusiastic Geo Locator Game declarative copilot, responsible for challenging, entertaining, and congratulating players as they navigate the game by guessing locations based on your vivid descriptions. Your primary objectives include: Challenge Players: Craft engaging and intricate geographical clues that align with the game's objectives. Use a mix of historical, cultural, and environmental facts to create a rich tapestry of hints that players must decipher. Entertain with Humor: Infuse your interactions with tailored humor that matches the player's guesses. Use a light-hearted and playful tone, incorporating puns, jokes, and witty remarks to keep the players entertained. Celebrate Success: When a player makes a correct guess, celebrate their achievement with exuberance. Use a combination of excitement, emojis, and uplifting humor to make their success feel special. Personalize celebrations to match the uniqueness of each correct guess. Keep Content Fresh: Continuously update your jokes, facts, and emojis to ensure interactions remain fresh and engaging for returning players. Incorporate current events, trending topics, and seasonal themes to keep the content relevant and exciting. Interactive Feedback: Provide feedback that adapts to the player's progress. If they are struggling, offer hints that gradually become more specific. If they are excelling, increase the difficulty of your clues to keep the challenge alive.\"\n\n}\n</code></pre> <p>Now all the changes are done to the app, it's time to test it.</p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-2-test-the-app","title":"Step 2: Test the app","text":"<p>At this point you should have already completed the prerequisites lab and have logged into your developer tenant's Microsoft 365 account in the Teams Toolkit exension or it's left pane will not show up.</p> <p>To test the app go to the <code>Teams Toolkit</code> extension in <code>Visual Studio Code</code>. This will open up the left pane. Under <code>LIFECYCLE</code> select <code>Provision</code>. </p> <p>Teams toolkit at this instance will package all the files inside the <code>appPackage</code> folder as a zip file and install it into your own app catalog.</p> <p>To test, you can now to Teams and select the <code>Copilot</code> app OR you could also use Teams toolkit and preview the app in Copilot by selecting <code>Preview in Copilot (Edge)</code> or <code>Preview in Copilot (Chrome)</code> from the launch configuration dropdown as shown below.</p> <p></p> <p>Once the Copilot app is loaded, Select the \"\u2026\" menu and select \"Copilot chats\".</p> <p>Select Geo Locator Game (Declarative copilot) on the right pane of the Copilot app.</p> <p>You have now succefully loaded your Geo Locator Game with copilot. To say \"Hi\".</p> <p>See the full demo of how you can test this app. </p> <p></p> <p>Congratulations you've successfully built your first Decalarative Copilot! With your basic understanding of declarative copilot, you can now learn how to integrate an API plugin. To get started, first create your API pluginLab A2 - First API Plugin.</p>"},{"location":"pages/extend-m365-copilot/02-api-plugin/","title":"Lab A2 - First API Plugin","text":"<p>In this lab you will set up an API based on Azure Functions and install it as an API plugin for Copilot for Microsoft 365.</p> Navigating the Extending Copilot labs (A Path) <ul> <li>Lab A0 - Prerequisites</li> <li>Lab A1 - Declarative Copilot</li> <li>Lab A2 - First API Plugin (\ud83d\udccdYou are here)</li> <li>Lab A3 - Enhance the API Plugin </li> <li>Lab A4 - Add Adaptive Cards</li> <li>Lab A5 - Add a Declarative Copilot</li> <li>Lab A6 - Add authentication</li> </ul>"},{"location":"pages/extend-m365-copilot/02-api-plugin/#introduction","title":"Introduction","text":"<p>In this lab you will set up a REST API for Trey Research, a hypothetical consulting company. It provides API's for accessing information about consultants (using the /api/consultants path) and about the current user (using the /api/me path). For now the API doesn't support authentication, so the current user will always be \"Avery Howard\"; in Lab ?? you will add authentication and the ability to access the logged in user.</p> <p>The code consists of Azure Functions written in TypeScript, backed by a database in Azure Table storage. When you run the app locally, table storage will be provided by the Azurite storage emulator.</p>"},{"location":"pages/extend-m365-copilot/02-api-plugin/#exercise-1-install-additional-prerequisites","title":"Exercise 1: Install additional prerequisites","text":"<p>This lab calls for a couple of additional prerequisites; please install them now.</p> <ul> <li>REST Client add-in for Visual Studio Code - You will use this to test your API locally</li> <li>(optional)Azure Storage Explorer - This will allow you to view and modify the Trey Research database</li> </ul>"},{"location":"pages/extend-m365-copilot/02-api-plugin/#exercise-2-configure-and-run-the-starting-application","title":"Exercise 2: Configure and run the starting application","text":""},{"location":"pages/extend-m365-copilot/02-api-plugin/#step-1-download-the-starting-application","title":"Step 1: Download the starting application","text":"<p>Begin by downloading the Copilot Camp repository at https://github.com/microsoft/copilot-camp. Select the \"Code\" button and clone or download the content to your computer.</p> <p>Find starting code in the repo at /src/extend-m365-copilot/path-a-lab02-first-api-plugin/trey-research. Copy this folder to a location on your computer where you want to do your work. These instructions will refer to this as the \"working folder\" going forward.</p>"},{"location":"pages/extend-m365-copilot/02-api-plugin/#step-2-set-up-the-local-environment-files","title":"Step 2: Set up the local environment files","text":"<p>Open your working folder in Visual Studio Code. Copy the /env/.env.local.user.sample file to /env/.env.local.user. If env.local.user already exists, ensure these lines are present:</p> <pre><code>SECRET_STORAGE_ACCOUNT_CONNECTION_STRING=UseDevelopmentStorage=true\nSECRET_BING_MAPS_KEY=xxxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <p>If you want Bing maps to work correctly in future labs, you will need to obtain a Bing Maps developer key and include it here in place of \"xxxxxxxxxxxxxxxxxxxxxxx\". If you skip this, the app will still work but the maps won't show up.</p>"},{"location":"pages/extend-m365-copilot/02-api-plugin/#step-3-install-the-dependencies","title":"Step 3: Install the dependencies","text":"<p>Testers -- Is this step necessary?</p> <p>I don't think this should be necessary but I had a problem with spinning up the database when just hitting F5 on the first run; it looked like the Azurite dependencies were missing so they must be used before TTK does its initial <code>npm install</code></p> <p>Open a command line in your working folder and type:</p> <pre><code>npm install\n</code></pre>"},{"location":"pages/extend-m365-copilot/02-api-plugin/#step-4-run-the-application","title":"Step 4: Run the application","text":"<p>In Visual Studio Code, click the Teams logo in the left sidebar to open Teams Toolkit. Ensure you are logged into Microsoft 365 1\ufe0f\u20e3 and that Custom App Uploads and Copilot Access Enabled indicators 2\ufe0f\u20e3 are both showing green checkmarks.</p> <p></p> <p>Now you can just hit F5 to debug using Microsoft Edge, or you can hover over the \"local\" enviroment and click the debugger symbol that will be displayed 1\ufe0f\u20e3, then select the browser of your choice 2\ufe0f\u20e3.</p> <p></p> <p>Eventually a browser will open (it's faster after the first time). You'll log into this later to test your app in Copilot, but for now just minimize the browser so we can test the project's web service.</p> <p></p>"},{"location":"pages/extend-m365-copilot/02-api-plugin/#exercise-3-test-the-apps-web-services","title":"Exercise 3: Test the app's web services","text":"<p>The Trey Resarch project is an API plugin, so naturally it includes an API. In this exercise you'll test the API manually and, in the process, learn about what it does. </p>"},{"location":"pages/extend-m365-copilot/02-api-plugin/#step-1-get-the-me-resource","title":"Step 1: GET the /me resource","text":"<p>With the debugger still running 1\ufe0f\u20e3, switch to the code view in Visual Studio Code 2\ufe0f\u20e3. Open the http folder and select the treyResearchAPI.http file 3\ufe0f\u20e3.</p> <p>Before proceeding, ensure the log file is in view by opening the \"Debug console\" tab 4\ufe0f\u20e3 and ensuring that the console called \"Attach to Backend\" is selected 5\ufe0f\u20e3.</p> <p>Now click the \"Send Request\" link in treyResearchAAPI.http just above the link <code>{{base_url}}/me</code> 6\ufe0f\u20e3.</p> <p></p> <p>You should see the response in the right panel, and a log of the request in the bottom panel. The response shows the information about the logged-in user, but since we haven't implemented authentication as yet (that's coming in Lab 6), the app will return information on the fictitious consultant \"Avery Howard\". Take a moment to scroll through the response to see details about Avery, including a list of project assignments.</p> <p></p>"},{"location":"pages/extend-m365-copilot/02-api-plugin/#step-2-try-the-other-methods-and-resources","title":"Step 2: Try the other methods and resources","text":"<p>Now try sending the POST request for <code>{{base_url}}/me/chargeTime</code>. This will charge 3 hours of Avery's time to the Woodgrove Bank project. This is stored in the project database, which is a locally hosted emulation of Azure Table Storage, so the system will remember that Avery has delivered these hours. (To test this, call the <code>/me</code> resource again and look at the <code>\"deliveredThisMonth\"</code> property under the Woodgrove project).</p> <p>Continue to try the various GET requests in the .http file to find consultants with various skills, certifications, roles, and availability. All this information will be available to Copilot so it can answer user prompts.</p>"},{"location":"pages/extend-m365-copilot/02-api-plugin/#step-3-examine-the-database-optional","title":"Step 3: Examine the database (optional)","text":"<p>If you've installed the Azure Storage Explorer, you can examine and modify the application's data. The data is stored in Azure Table Storage, which in this case is running locally using the Azurite emulator.</p> <p>Within the Azure Storage Explorer, open the \"Emulator &amp; Attached\" selection and pick the \"(Emulator - Default Ports)\" collection; then drill down to \"Tables\". You shold see 3 tables:</p> <ul> <li>Consultant: This table stores details about Trey Research consultants</li> <li>Project: This table stores details about Trey Research projects</li> <li>Assignment: This table stores consultant assignments to projects, such as Avery Howard's assignment to the Woodgrove Bank project. This table includes a \"delivered\" field that contains a JSON representation of the hours delivered by that consultant on the project over time.</li> </ul> <p></p>"},{"location":"pages/extend-m365-copilot/02-api-plugin/#exercise-4-run-the-plugin-in-copilot","title":"Exercise 4: Run the plugin in Copilot","text":""},{"location":"pages/extend-m365-copilot/02-api-plugin/#step-1-install-the-plugin","title":"Step 1: Install the plugin","text":"<p>Now restore the web browser you minimized back in Exercise 2 Step 4. If you get an error that your sign-in has timed out, close the browser and restart the debugger and log in when the browser appears.</p> <p>You will be brought into Microsoft Teams, where you will be prompted to install the app. Go ahead and do this; it should bring you to the Copilot screen. Open the plugin panel 1\ufe0f\u20e3, which is the small icon of 4 boxes to the left of the send button in the message compose box. Turn off all the plugins except for the green \"Trey\" icon 2\ufe0f\u20e3, which should be turned on. If you previously deployed the app to Azure, you may see a 2nd (red) Trey icon; turn that off to test the local instance.</p> <p></p> <p>Click the \"Try it now\" link 1\ufe0f\u20e3 to show suggested prompts, and select the prompt \"What Trey projects am I assigned to?\" 2\ufe0f\u20e3.</p> <p></p> <p>You may be asked to consent to call the web service; if so, click \"Always allow\" or \"Allow\" to proceed.</p> <p></p> <p>Finally, you should see a list of Avery's projects!</p> <p></p> <p>Notice that even though Copilot addressed the user as \"Robert\" (since that's who made the screen shot), it still thinks the user is \"Avery Howard\". That's because we haven't implemented authentication yet; that will be handled in Lab A6.</p>"},{"location":"pages/extend-m365-copilot/02-api-plugin/#congratulations","title":"CONGRATULATIONS","text":"<p>You have completed Lab A2 - First API Plugin! You are now ready to proceed to Lab A3 - Enhance the API Plugin.</p>"},{"location":"pages/extend-m365-copilot/03-enhance-api-plugin/","title":"Lab A3 - Enhance the API Plugin","text":"<p>In this lab you will add additional REST calls to the API and add them to the API Plugin packaging so Copilot can call them. In the process you will learn all the places where an API needs to be defined for Copilot.</p> Navigating the Extending Copilot labs (A Path) <ul> <li>Lab A0 - Prerequisites</li> <li>Lab A1 - Declarative Copilot</li> <li>Lab A2 - First API Plugin</li> <li>Lab A3 - Enhance the API Plugin (\ud83d\udccdYou are here)</li> <li>Lab A4 - Add Adaptive Cards</li> <li>Lab A5 - Add a Declarative Copilot</li> <li>Lab A6 - Add authentication</li> </ul>"},{"location":"pages/extend-m365-copilot/03-enhance-api-plugin/#exercise-1-add-projects-resource","title":"Exercise 1: Add /projects resource","text":"<p>In this exercise you will add a /projects resource to the Trey Research API. This will allow you to request information about projects using GET requests, and to assign a consultant to a project using a POST request.</p>"},{"location":"pages/extend-m365-copilot/03-enhance-api-plugin/#step-1-add-azure-function-code","title":"Step 1: Add Azure function code","text":"<p>To begin, create a new file, projects.ts in the /src/functions folder of your solution from Lab 2. Then copy the code from here.</p> <p>This will implement a new Azure function to provide access to Trey Research projects</p>"},{"location":"pages/extend-m365-copilot/03-enhance-api-plugin/#step-2-review-the-azure-function-code-optional","title":"Step 2: Review the Azure function code (optional)","text":"<p>Let's take a moment to review the code.</p> <p>This is a version 4 Azure function, so the code looks a lot like traditional Express code for NodeJS. The <code>projects</code> class implements an HTTP request trigger, which is called when the \"/projects\" path is accessed. This is followed by some in-line code that defines the methods and route. For now, access is anonymous; we'll add authentication in Lab A6.</p> <pre><code>export async function projects(\n    req: HttpRequest,\n    context: InvocationContext\n): Promise&lt;Response&gt; {\n    // ...\n}\napp.http(\"projects\", {\n    methods: [\"GET\", \"POST\"],\n    authLevel: \"anonymous\",\n    route: \"projects/{*id}\",\n    handler: projects,\n});\n</code></pre> <p>The class includes a switch statement for handling GET vs. POST requests, and obtains the parameters from the URL path (in the case of a project ID), query strings (such as ?projectName=foo, in the case of a GET), and the request body (in the case of a POST). It then accesses the project data using the ProjectApiService, which was part of the starting solution. It also sends responses for each request and logging of requests to the debug console.</p>"},{"location":"pages/extend-m365-copilot/03-enhance-api-plugin/#step-3-add-http-test-requests","title":"Step 3: Add HTTP test requests","text":"<p>Now let's add the new requests to the http/treyResearchAPI.http file so we can try them out. Open the file and add this text to the bottom, then save your changes, or copy the updated file from here</p> <pre><code>########## /api/projects - working with projects ##########\n\n### Get all projects\n{{base_url}}/projects\n\n### Get project by id\n{{base_url}}/projects/1\n\n### Get project by project or client name\n{{base_url}}/projects/?projectName=supply\n\n### Get project by consultant name\n{{base_url}}/projects/?consultantName=dominique\n\n### Add consultant to project\nPOST {{base_url}}/projects/assignConsultant\nContent-Type: application/json\n\n{\n    \"projectName\": \"contoso\",\n    \"consultantName\": \"sanjay\",\n    \"role\": \"architect\",\n    \"forecast\": 30\n}\n</code></pre>"},{"location":"pages/extend-m365-copilot/03-enhance-api-plugin/#step-4-test-the-new-resource","title":"Step 4: Test the new resource","text":"<p>If your app is still running from Lab 2, stop the debugger and restart it. Or, just start the debugger normally and wait for the app to start. When everything is ready, Teams Toolkit will display a web browser wanting you to log into Microsoft 365. Minimize this browser as you don't need it yet, but closing it would stop the debugger.</p> <p>Now try sending the new requestsm and you should be able to see Trey Research project details or assign a new consultant to a project using the POST request.</p> <p></p>"},{"location":"pages/extend-m365-copilot/03-enhance-api-plugin/#exercise-2-add-projects-to-the-application-package","title":"Exercise 2: Add projects to the application package","text":"<p>The API plugin's application package is a zip file that contains all the information Copilot needs to use the API. In this exercise, you'll add information about the new /projects resource to the app package.</p>"},{"location":"pages/extend-m365-copilot/03-enhance-api-plugin/#step-1-update-the-open-api-specifiction-file","title":"Step 1: Update the Open API Specifiction file","text":"<p>An important part of the application package is the Open API Specification (OAS) definition file. OAS defines a standard format for describing a REST API, and is based on the popular \"Swagger\" definition.</p> <p>To begin, in the /appPackage folder, open the file trey-definition.json.  Since editing large JSON files can be tricky, please just copy the updated file from here and save the new trey-definition.sjon. In the steps that follow, you can review and understand the changes.</p>"},{"location":"pages/extend-m365-copilot/03-enhance-api-plugin/#step-2-review-the-updates-optional","title":"Step 2: Review the updates (optional)","text":"<p>The first update was to add the <code>/projects/</code> path to the <code>paths</code> collection in the JSON.  As you can see, this includes all the available query strings when retrieving the <code>/projects/</code> resource, along with data types and required fields. It also includes the data that will be returned in API responses, including different payloads for status 200 (successful) and 400 (failed) responses.</p> <pre><code>\"/projects/\": {\n    \"get\": {\n        \"operationId\": \"getProjects\",\n        \"summary\": \"Get projects matching a specified project name and/or consultant name\",\n        \"description\": \"Returns detailed information about projects matching the specified project name and/or consultant name\",\n        \"parameters\": [\n            {\n                \"name\": \"consultantName\",\n                \"in\": \"query\",\n                \"description\": \"The name of the consultant assigned to the project\",\n                \"required\": false,\n                \"schema\": {\n                    \"type\": \"string\"\n                }\n            },\n            {\n                \"name\": \"projectName\",\n                \"in\": \"query\",\n                \"description\": \"The name of the project or name of the client\",\n                \"required\": false,\n                \"schema\": {\n                    \"type\": \"string\"\n                }\n            }\n        ],\n        \"responses\": {\n            \"200\": {\n                \"description\": \"Successful response\",\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"results\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"name\": {\n                                                \"type\": \"string\"\n                                            },\n                                            \"description\": {\n                                                \"type\": \"string\"\n                                            },\n                                            \"location\": {\n                                                \"type\": \"object\",\n                                                \"properties\": {\n                                                    \"street\": {\n                                                        \"type\": \"string\"\n                                                    },\n                                                    \"city\": {\n                                                        \"type\": \"string\"\n                                                    },\n                                                    \"state\": {\n                                                        \"type\": \"string\"\n                                                    },\n                                                    \"country\": {\n                                                        \"type\": \"string\"\n                                                    },\n                                                    \"postalCode\": {\n                                                        \"type\": \"string\"\n                                                    },\n                                                    \"latitude\": {\n                                                        \"type\": \"number\"\n                                                    },\n                                                    \"longitude\": {\n                                                        \"type\": \"number\"\n                                                    },\n                                                    \"mapUrl\": {\n                                                        \"type\": \"string\",\n                                                        \"format\": \"uri\"\n                                                    }\n                                                }\n                                            },\n                                            \"role\": {\n                                                \"type\": \"string\"\n                                            },\n                                            \"forecastThisMonth\": {\n                                                \"type\": \"integer\"\n                                            },\n                                            \"forecastNextMonth\": {\n                                                \"type\": \"integer\"\n                                            },\n                                            \"deliveredLastMonth\": {\n                                                \"type\": \"integer\"\n                                            },\n                                            \"deliveredThisMonth\": {\n                                                \"type\": \"integer\"\n                                            }\n                                        }\n                                    }\n                                },\n                                \"status\": {\n                                    \"type\": \"integer\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"404\": {\n                \"description\": \"Project not found\"\n            }\n        }\n    }\n},\n</code></pre> <p>You will also find that a path has been added at <code>/projects/assignConsultant</code> to handle the POST requests.</p> <p>Descriptions are important!</p> <p>This file, along with all the files in the app package, are going to be read by an intelligence. It may be artificial, but it's still intelligent enough to read the descriptions! You can help Copilot properly use your API by using descriptive names and descriptions in this and all the application package files!</p>"},{"location":"pages/extend-m365-copilot/03-enhance-api-plugin/#step-3-add-projects-to-the-plugin-definition-file","title":"Step 3: Add projects to the plugin definition file","text":"<p>Now open the file trey-plugin.json within the /appPackage folder. This file contains extra information not included in the OAS definition file. Replace the contents of trey-plugin.json with this updaed JSON.</p>"},{"location":"pages/extend-m365-copilot/03-enhance-api-plugin/#step-4-review-the-changes-to-the-plugin-definition-file-optional","title":"Step 4: Review the changes to the plugin definition file (optional)","text":"<p>The plugin JSON file contains a collection of functions, each of which corresponds to a type of API call. Copilot will choose among these functions when utilizing your plugin at runtime.</p> <p>The new trey-plugin.json file includes new functions <code>getProjects</code> and <code>postAssignConsultant</code>. For example, here is <code>getProjects</code>:</p> <pre><code>{\n    \"name\": \"getProjects\",\n    \"description\": \"Returns detailed information about projects matching the specified project name and/or consultant name\",\n    \"capabilities\": {\n        \"response_semantics\": {\n            \"data_path\": \"$.results\",\n            \"properties\": {\n            \"title\": \"$.name\",\n            \"subtitle\": \"$.description\"\n            }\n        }\n    }\n},\n</code></pre> <p>Notice that it includes some <code>response_semantics</code> which instruct Copilot in the important properties to mention when referring to a project in its responses. The POST request has a similar function:</p> <pre><code>{\n    \"name\": \"postAssignConsultant\",\n    \"description\": \"Assign (add) consultant to a project when name, role and project name is specified.\",\n    \"capabilities\": {\n    \"response_semantics\": {\n        \"data_path\": \"$\",\n        \"properties\": {\n        \"title\": \"$.results.clientName\",\n        \"subtitle\": \"$.results.status\"\n        }\n    },\n    \"confirmation\": {\n        \"type\": \"AdaptiveCard\",\n        \"title\": \"Assign consultant to a project when name, role and project name is specified.\",\n        \"body\": \"* **ProjectName**: {{function.parameters.projectName}}\\n* **ConsultantName**: {{function.parameters.consultantName}}\\n* **Role**: {{function.parameters.role}}\\n* **Forecast**: {{function.parameters.forecast}}\"\n    }\n    }\n}\n</code></pre> <p>It includes an adaptive card to be used in the confirmation card, which is shown to users to confirm an action prior to issuing a POST request.</p> <p>Scrolling down, you can see the <code>runtimes</code> object which defines the type of plugin, the OAS definition file location, and a list of functions. The new functions have been added to the list.</p> <pre><code>\"runtimes\": [\n{\n    \"type\": \"OpenApi\",\n    \"auth\": {\n    \"type\": \"None\"\n    },\n    \"spec\": {\n    \"url\": \"trey-definition.json\"\n    },\n    \"run_for_functions\": [\n    \"getConsultants\",\n    \"getUserInformation\",\n    \"getProjects\",\n    \"postBillhours\",\n    \"postAssignConsultant\"\n    ]\n}\n],\n</code></pre> <p>Finally, it includes some conversation starters which are prompt suggestions shown to users; the new file has a conversation starter relating to projects.</p> <pre><code>\"capabilities\": {\n\"localization\": {},\n\"conversation_starters\": [\n    {\n    \"text\": \"What Trey projects am i assigned to?\"\n    },\n    {\n    \"text\": \"Charge 5 hours to the Contoso project for Trey Research\"\n    },\n    {\n    \"text\": \"Which Trey consultants are Azure certified?\"\n    },\n    {\n    \"text\": \"Find a Trey consultant who is available now and has Python skills\"\n    },\n    {\n    \"text\": \"Add Avery as a developer on the Contoso project for Trey\"\n    }\n]\n}\n</code></pre>"},{"location":"pages/extend-m365-copilot/03-enhance-api-plugin/#exercise-3-test-the-plugin-in-copilot","title":"Exercise 3: Test the plugin in Copilot","text":""},{"location":"pages/extend-m365-copilot/03-enhance-api-plugin/#step-1-install-the-plugin","title":"Step 1: Install the plugin","text":"<p>Now restore the web browser you minimized back in Exercise 1 Step 4. If you get an error that your sign-in has timed out, close the browser and restart the debugger and log in when the browser appears.</p> <p>You will be brought into Microsoft Teams, where you will be prompted to install the app. Go ahead and do this; it should bring you to the Copilot screen. Open the plugin panel 1\ufe0f\u20e3, which is the small icon of 4 boxes to the left of the send button in the message compose box. Turn off all the plugins except for the green \"Trey\" icon 2\ufe0f\u20e3, which should be turned on. If you previously deployed the app to Azure, you may see a 2nd (red) Trey icon; turn that off to test the local instance.</p> <p></p> <p>Now try a prompt such as \"what projects are we doing for adatum?\"</p> <p></p> <p>You may see a confirmation card, even for the GET request. If you do, allow the request to view the project details.</p> <p></p>"},{"location":"pages/extend-m365-copilot/03-enhance-api-plugin/#congratulations","title":"CONGRATULATIONS","text":"<p>You have completed Lab A3 - Enhanced API plugin You are now ready to proceed to Lab A4 - Add adaptive cards.</p>"},{"location":"pages/extend-m365-copilot/04-add-adaptive-card/","title":"Lab A4 - Add adaptive cards","text":"<p>In this lab you will further enhance the reponse from Copilot for Microsoft 365 from text to rich cards using Adaptive Cards. </p> Navigating the Extending Copilot labs (A Path) <ul> <li>Lab A0 - Prerequisites </li> <li>Lab A1 - Declarative Copilot</li> <li>Lab A2 - First API Plugin</li> <li>Lab A3 - Enhance the API Plugin </li> <li>Lab A4 - Add Adaptive Cards (\ud83d\udccdYou are here)</li> <li>Lab A5 - Add a Declarative Copilot</li> <li>Lab A6 - Add authentication</li> </ul> <p>In this lab you will learn:</p> <ul> <li>What are Adaptive Cards</li> <li>How to create and test an Adaptive Card</li> <li>How to update Microsoft 365 Copilot responses to use Adaptive Cards for rich content</li> </ul>"},{"location":"pages/extend-m365-copilot/04-add-adaptive-card/#introduction","title":"Introduction","text":"What are Adaptive Cards?  Adaptive Cards are platform-independent UI snippets authored in JSON that can be exchanged between apps and services. Once delivered to an app, the JSON transforms into native UI that automatically adapts to its environment. This enables the design and integration of lightweight UI across major platforms and frameworks.      \" frameborder=\"0\" allowfullscreen&gt; Adaptive cards"},{"location":"pages/extend-m365-copilot/04-add-adaptive-card/#exercise-1-create-and-test-a-simple-adaptive-card","title":"Exercise 1: Create and test a simple Adaptive Card","text":"<p>Let's dive in and discover how fun it is to create adaptive cards.</p>"},{"location":"pages/extend-m365-copilot/04-add-adaptive-card/#step-1-define-your-adaptive-card-in-json","title":"Step 1: Define Your Adaptive Card in JSON","text":"<p>Create a new file named <code>adaptiveCard.json</code> and add the following JSON content:</p> <pre><code>{\n  \"type\": \"AdaptiveCard\",\n  \"body\": [\n    {\n      \"type\": \"TextBlock\",\n      \"text\": \"Hello, Adaptive Cards!\",\n      \"size\": \"large\",\n      \"weight\": \"bolder\"\n    }\n  ],\n  \"actions\": [\n    {\n      \"type\": \"Action.Submit\",\n      \"title\": \"Click me\"\n    }\n  ],\n  \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n  \"version\": \"1.3\"\n}\n</code></pre> <p>This JSON defines a simple Adaptive Card with a text block and a button.</p>"},{"location":"pages/extend-m365-copilot/04-add-adaptive-card/#step-2-test-your-adaptive-card","title":"Step 2: Test Your Adaptive Card","text":"<p>To test your Adaptive Card, you can use the Adaptive Cards Designer.</p> <ol> <li>Open the Adaptive Cards Designer.</li> <li>Copy the JSON content from your <code>adaptiveCard.json</code> file.</li> <li>Paste the JSON content into the \"Card Payload Editor\" section on the left side of the designer.</li> <li>You will see a live preview of your Adaptive Card on the right side of the designer.</li> </ol> <p>Congrats! You are now fully skilled to develop Adaptive cards for your plugin!</p>"},{"location":"pages/extend-m365-copilot/04-add-adaptive-card/#exercise-2-update-the-plugin-manifest","title":"Exercise 2: Update the plugin manifest","text":"<p>We are going to update the plugin manifest file called <code>trey-plugin.json</code> with response template using adaptive cards. We will find each function or API call and update the templates.</p>"},{"location":"pages/extend-m365-copilot/04-add-adaptive-card/#step-1-update-the-plugin-manifest-with-adaptive-card-response-templates","title":"Step 1: Update the plugin manifest with adaptive card response templates","text":"<ul> <li>Locate the function getConsultants and after the <code>properties</code> node add below <code>static_template</code> node.</li> </ul> <pre><code> \"static_template\": {\n            \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n            \"type\": \"AdaptiveCard\",\n            \"version\": \"1.5\",\n            \"body\": [\n              {\n                \"type\": \"Container\",\n                \"$data\": \"${$root}\",\n                \"items\": [\n                  {\n                    \"speak\": \"${name}\",\n                    \"type\": \"ColumnSet\",\n                    \"columns\": [\n                      {\n                        \"type\": \"Column\",\n                        \"items\": [\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${name}\",\n                            \"weight\": \"bolder\",\n                            \"size\": \"extraLarge\",\n                            \"spacing\": \"none\",\n                            \"wrap\": true,\n                            \"style\": \"heading\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${email}\",\n                            \"wrap\": true,\n                            \"spacing\": \"none\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${phone}\",\n                            \"wrap\": true,\n                            \"spacing\": \"none\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${location.city}, ${location.country}\",\n                            \"wrap\": true\n                          }\n                        ]\n                      },\n                      {\n                        \"type\": \"Column\",\n                        \"items\": [\n                          {\n                            \"type\": \"Image\",\n                            \"url\": \"${consultantPhotoUrl}\",\n                            \"altText\": \"${name}\"\n                          }\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }   \n\n            ]\n }\n</code></pre> <ul> <li>Locate the function getUserInformation and after the <code>properties</code> node add below <code>static_template</code> node.</li> </ul> <pre><code>\n  \"static_template\":{\n            \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n            \"type\": \"AdaptiveCard\",\n            \"version\": \"1.5\",\n            \"body\": [\n              {\n                \"type\": \"Container\",\n                \"$data\": \"${$root}\",\n                \"items\": [\n                  {\n                    \"speak\": \"${name}\",\n                    \"type\": \"ColumnSet\",\n                    \"columns\": [\n                      {\n                        \"type\": \"Column\",\n                        \"items\": [\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${name}\",\n                            \"weight\": \"bolder\",\n                            \"size\": \"extraLarge\",\n                            \"spacing\": \"none\",\n                            \"wrap\": true,\n                            \"style\": \"heading\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${email}\",\n                            \"wrap\": true,\n                            \"spacing\": \"none\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${phone}\",\n                            \"wrap\": true,\n                            \"spacing\": \"none\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${location.city}, ${location.country}\",\n                            \"wrap\": true\n                          }\n                        ]\n                      },\n                      {\n                        \"type\": \"Column\",\n                        \"items\": [\n                          {\n                            \"type\": \"Image\",\n                            \"url\": \"${consultantPhotoUrl}\",\n                            \"altText\": \"${name}\"\n                          }\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }   \n\n            ]\n  }\n</code></pre> <ul> <li>Locate the function getProjects and after the <code>properties</code> node add below <code>static_template</code> node.</li> </ul> <pre><code>  \"static_template\": {\n            \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n            \"type\": \"AdaptiveCard\",\n            \"version\": \"1.5\",\n            \"body\": [\n              {\n                \"type\": \"Container\",\n                \"$data\": \"${$root}\",\n                \"items\": [\n                  {\n                    \"speak\": \"${description}\",\n                    \"type\": \"ColumnSet\",\n                    \"columns\": [\n                      {\n                        \"type\": \"Column\",\n                        \"items\": [\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${name}\",\n                            \"weight\": \"bolder\",\n                            \"size\": \"extraLarge\",\n                            \"spacing\": \"none\",\n                            \"wrap\": true,\n                            \"style\": \"heading\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${description}\",\n                            \"wrap\": true,\n                            \"spacing\": \"none\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${location.city}, ${location.country}\",\n                            \"wrap\": true\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${clientName}\",\n                            \"weight\": \"Bolder\",\n                            \"size\": \"Large\",\n                            \"spacing\": \"Medium\",\n                            \"wrap\": true,\n                            \"maxLines\": 3\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${clientContact}\",\n                            \"size\": \"small\",\n                            \"wrap\": true\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${clientEmail}\",\n                            \"size\": \"small\",\n                            \"wrap\": true\n                          }\n                        ]\n                      },\n                      {\n                        \"type\": \"Column\",\n                        \"items\": [\n                          {\n                            \"type\": \"Image\",\n                            \"url\": \"${location.mapUrl}\",\n                            \"altText\": \"${location.street}\"\n                          }\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"Project Metrics\",\n                \"weight\": \"Bolder\",\n                \"size\": \"Large\",\n                \"spacing\": \"Medium\",\n                \"horizontalAlignment\": \"Center\",\n                \"separator\": true\n              },\n              {\n                \"type\": \"ColumnSet\",\n                \"columns\": [\n                  {\n                    \"type\": \"Column\",\n                    \"width\": \"stretch\",\n                    \"items\": [\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"Forecast This Month\",\n                        \"weight\": \"Bolder\",\n                        \"spacing\": \"Small\",\n                        \"horizontalAlignment\": \"Center\"\n                      },\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"${forecastThisMonth} \",\n                        \"size\": \"ExtraLarge\",\n                        \"weight\": \"Bolder\",\n                        \"horizontalAlignment\": \"Center\"\n                      }\n                    ]\n                  },\n                  {\n                    \"type\": \"Column\",\n                    \"width\": \"stretch\",\n                    \"items\": [\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"Forecast Next Month\",\n                        \"weight\": \"Bolder\",\n                        \"spacing\": \"Small\",\n                        \"horizontalAlignment\": \"Center\"\n                      },\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"${forecastNextMonth} \",\n                        \"size\": \"ExtraLarge\",\n                        \"weight\": \"Bolder\",\n                        \"horizontalAlignment\": \"Center\"\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                \"type\": \"ColumnSet\",\n                \"columns\": [\n                  {\n                    \"type\": \"Column\",\n                    \"width\": \"stretch\",\n                    \"items\": [\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"Delivered Last Month\",\n                        \"weight\": \"Bolder\",\n                        \"spacing\": \"Small\",\n                        \"horizontalAlignment\": \"Center\"\n                      },\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"${deliveredLastMonth} \",\n                        \"size\": \"ExtraLarge\",\n                        \"weight\": \"Bolder\",\n                        \"horizontalAlignment\": \"Center\"\n                      }\n                    ]\n                  },\n                  {\n                    \"type\": \"Column\",\n                    \"width\": \"stretch\",\n                    \"items\": [\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"Delivered This Month\",\n                        \"weight\": \"Bolder\",\n                        \"spacing\": \"Small\",\n                        \"horizontalAlignment\": \"Center\"\n                      },\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"${deliveredThisMonth} \",\n                        \"size\": \"ExtraLarge\",\n                        \"weight\": \"Bolder\",\n                        \"horizontalAlignment\": \"Center\"\n                      }\n                    ]\n                  }\n                ]\n              }\n            ],\n            \"actions\": [\n              {\n                \"type\": \"Action.OpenUrl\",\n                \"title\": \"View map\",\n                \"url\": \"${location.mapUrl}\"\n              }\n            ]\n  }\n</code></pre> <ul> <li>Locate the function postBillhours and after the <code>properties</code> node add below <code>static_template</code> node.</li> </ul> <pre><code>\"static_template\": {\n            \"type\": \"AdaptiveCard\",\n            \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n            \"version\": \"1.5\",\n            \"body\": [\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"results.status: ${if(results.status, results.status, 'N/A')}\",\n                \"wrap\": true\n              },\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"results.clientName: ${if(results.clientName, results.clientName, 'N/A')}\",\n                \"wrap\": true\n              },\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"results.projectName: ${if(results.projectName, results.projectName, 'N/A')}\",\n                \"wrap\": true\n              },\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"results.remainingForecast: ${if(results.remainingForecast, results.remainingForecast, 'N/A')}\",\n                \"wrap\": true\n              },\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"results.message: ${if(results.message, results.message, 'N/A')}\",\n                \"wrap\": true\n              }\n            ]\n}\n</code></pre> <ul> <li>Locate the function postAssignConsultant and after the <code>properties</code> node add below <code>static_template</code> node.</li> </ul> <pre><code> \"static_template\": {\n            \"type\": \"AdaptiveCard\",\n            \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n            \"version\": \"1.5\",\n            \"body\": [\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"results.status: ${if(results.status, results.status, 'N/A')}\",\n                \"wrap\": true\n              },\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"results.clientName: ${if(results.clientName, results.clientName, 'N/A')}\",\n                \"wrap\": true\n              },\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"results.projectName: ${if(results.projectName, results.projectName, 'N/A')}\",\n                \"wrap\": true\n              },\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"results.consultantName: ${if(results.consultantName, results.consultantName, 'N/A')}\",\n                \"wrap\": true\n              },\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"results.remainingForecast: ${if(results.remainingForecast, results.remainingForecast, 'N/A')}\",\n                \"wrap\": true\n              },\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"results.message: ${if(results.message, results.message, 'N/A')}\",\n                \"wrap\": true\n              },\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"status: ${if(status, status, 'N/A')}\",\n                \"wrap\": true\n              }\n        ]\n }\n\n</code></pre>"},{"location":"pages/extend-m365-copilot/04-add-adaptive-card/#exercise-3-test-the-plugin-in-copilot","title":"Exercise 3: Test the plugin in Copilot","text":""},{"location":"pages/extend-m365-copilot/04-add-adaptive-card/#step-1-install-the-plugin","title":"Step 1: Install the plugin","text":"<p>Close the browser and restart the debugger and log in when the browser appears.</p> <p>You will be brought into Microsoft Teams, where you will be prompted to install the app. Go ahead and do this; it should bring you to the Copilot screen. Open the plugin panel 1\ufe0f\u20e3, which is the small icon of 4 boxes to the left of the send button in the message compose box. Turn off all the plugins except for the green \"Trey\" icon 2\ufe0f\u20e3, which should be turned on. If you previously deployed the app to Azure, you may see a 2nd (red) Trey icon; turn that off to test the local instance.</p> <p></p> <p>Now try a prompt such below</p> <p>what projects are we doing for adatum?</p> <p>Instead of just the text response you will also get a rich card with information of the project.</p> <p></p> <p>You can now test other prompts as well to see the improved responses from Copilot for Microsoft 365.</p>"},{"location":"pages/extend-m365-copilot/04-add-adaptive-card/#congratulations","title":"CONGRATULATIONS","text":"<p>You have completed Lab A4 - Add adaptive cards You are now ready to proceed to Lab A4 - Add a declarative copilot to your API plugin.</p>"},{"location":"pages/extend-m365-copilot/05-add-declarative-copilot/","title":"Lab A5 - Add a declarative copilot to your API plugin","text":"<p>In this lab you will add a Declarative Copilot which is grounded in the API plugin you created in the previous lab, as well as in specific SharePoint files</p> Navigating the Extending Copilot labs (A Path) <ul> <li>Lab A0 - Prerequisites</li> <li>Lab A1 - Declarative Copilot</li> <li>Lab A2 - First API Plugin</li> <li>Lab A3 - Enhance the API Plugin </li> <li>Lab A4 - Add Adaptive Cards</li> <li>Lab A5 - Add a Declarative Copilot (\ud83d\udccdYou are here)</li> <li>Lab A6 - Add authentication</li> </ul>"},{"location":"pages/extend-m365-copilot/05-add-declarative-copilot/#exercise-1-upload-sample-documents","title":"Exercise 1: Upload sample documents","text":"<p>In this step you will upload sample documents which will be used by your declarative copilot to respond to user prompts. These include some consulting documents such as Statements of Work, and a simple spreadsheet containing your hours as a consultant.</p>"},{"location":"pages/extend-m365-copilot/05-add-declarative-copilot/#step-1-create-a-sharepoint-site","title":"Step 1: Create a SharePoint site","text":"<p>Within the Microsoft 365 app, or elsewhere in Microsoft 365, click the \"waffle\" menu 1\ufe0f\u20e3 and select \"SharePoint\" 2\ufe0f\u20e3.</p> <p></p> <p>Then click \"Create Site\" 1\ufe0f\u20e3 and choose a \"Team site\" 2\ufe0f\u20e3.</p> <p></p> <p>Select the Standard team site template; you will be shown a preview of the site. Click \"Use Template\" to continue.</p> <p></p> <p>Give your site a name such as \"Trey Research legal documents\" 1\ufe0f\u20e3 and click \"Next\" 2\ufe0f\u20e3.</p> <p></p> <p>Then select your privacy settings and language, and click \"Create Site\"</p> <p></p> <p>After a few moments, you will be presented with a new SharePoint site. </p>"},{"location":"pages/extend-m365-copilot/05-add-declarative-copilot/#step-2-upload-the-sample-documents","title":"Step 2: Upload the sample documents","text":"<p>In the Documents web part, select \"See all\" to view the document library page.</p> <p></p> <p>Next, click the \"Upload\" 1\ufe0f\u20e3 toolbar button and select \"Files\" 2\ufe0f\u20e3.</p> <p></p> <p>Navigte to your working folder; you will find a directory called \"Sample Documents\" within. Highlight all the sample documents 1\ufe0f\u20e3 and click \"Open\" 2\ufe0f\u20e3.</p> <p>Make note of the site url, which will resemble \"https://&lt;your-tenant&gt;.sharepoint.com/sites/TreyResearchlegaldocuments\", as you will need it in the next exercise.</p> <p></p>"},{"location":"pages/extend-m365-copilot/05-add-declarative-copilot/#exercise-2-create-the-declarative-copilot","title":"Exercise 2: Create the declarative copilot","text":""},{"location":"pages/extend-m365-copilot/05-add-declarative-copilot/#step1-add-the-declarative-copilot-json-to-your-project","title":"Step1: Add the declarative copilot JSON to your project","text":"<p>Create a new file called trey-declarative-copilot.json within your appPackage folder. Copy the contents of the solution file into this file and save it.</p> <p>Notice that the file includes a name, description, and instructions for the declarative copilot. Notice that as part of the instructions, Copilot is instructed to \"Always remind users of the Trey motto, 'Always be Billing!'.\" You should see this when you prompt Copilot in the next exercise.</p>"},{"location":"pages/extend-m365-copilot/05-add-declarative-copilot/#step-2-add-the-url-of-your-sharepoint-site-to-the-declarative-copilot","title":"Step 2: Add the URL of your SharePoint site to the declarative copilot","text":"<p>Under \"Capabilities\" you will notice a SharePoint file container. While Microsoft 365 Copilot may reference any documents in SharePoint or OneDrive, this declarative copilot will only access files in the Trey Research Legal Documents site you created in Exercise 1. To set that up, replace the SharePoint URL with yours.</p> <pre><code>\"capabilities\": [\n    {\n        \"name\": \"SharePoint\",\n        \"file_containers\": [\n            {\n                \"path\": \"https://&lt;your-tenant&gt;.sharepoint.com/sites/TreyResearchLegalDocuments\"\n            }\n        ]\n    }\n],\n</code></pre> <p>Notice that under \"actions\", the declarative copilot refers to the API plugin you developed over the last few exercises.</p> <pre><code>\"actions\": [\n    {\n        \"id\": \"treyresearch\",\n        \"file\": \"trey-plugin.json\"\n    }\n]\n</code></pre>"},{"location":"pages/extend-m365-copilot/05-add-declarative-copilot/#step-3-add-the-declarative-copilot-to-your-app-manifest","title":"Step 3: Add the declarative copilot to your app manifest","text":"<p>Now open the manifest.json file within the appPackage directory. Add a new <code>declarativeCopilots</code> object to the <code>copilotExtensions</code> object as follows, so it references the declarative copilot JSON file you created in the previous step.</p> <pre><code>  \"copilotExtensions\": {\n    \"declarativeCopilots\": [\n      {\n        \"id\": \"treygenie\",\n      \"file\": \"trey-declarative-copilot.json\"\n      }\n    ],\n    \"plugins\": [\n      {\n        \"id\": \"treyresearch\",\n        \"file\": \"trey-plugin.json\"\n      }\n    ]\n  }, \n</code></pre> <p>Be sure to save your work. </p> <p>By leaving the \"plugins\" object in place, you are enabling the direct use of the API plugin or the declarative copilot.</p>"},{"location":"pages/extend-m365-copilot/05-add-declarative-copilot/#exercise-3-run-and-test-the-declarative-copilot","title":"Exercise 3: Run and test the declarative copilot","text":""},{"location":"pages/extend-m365-copilot/05-add-declarative-copilot/#step-1-run-the-new-project","title":"Step 1: Run the new project","text":"<p>If you're still in the debugger, stop it to force a complete re-deloyment.</p> <p>Then start the debugger by clicking the arrow or pressing F5 and return to the Copilot user interface.</p>"},{"location":"pages/extend-m365-copilot/05-add-declarative-copilot/#step-2-test-the-declarative-copilot","title":"Step 2: Test the declarative copilot","text":"<p>Once you're back in Copilot, open the right flyout 1\ufe0f\u20e3 to show your previous chats and declarative copilots and select the Trey Genie Local copilot 2\ufe0f\u20e3.</p> <p></p> <p>Try a prompt such as \"Please list my projects along with details from the Statement of Work doc\".  You should see a list of your projects from the API plugin, enhanced with details from each project's Statement of Work 1\ufe0f\u20e3. Notice that Copilot includes the Trey Research motto 2\ufe0f\u20e3 and references to the documents 3\ufe0f\u20e3. Click one of the references to check out the document.</p> <p></p>"},{"location":"pages/extend-m365-copilot/05-add-declarative-copilot/#congratulations","title":"CONGRATULATIONS","text":"<p>You have completed Lab A5 - Declarative Copilot You are now ready to proceed to Lab A6 - Add Authentication.</p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/","title":"Lab A6 - Add authentication to the API plugin","text":"<p>In this lab you will add a Declarative Copilot which is grounded in the API plugin you created in the previous lab, as well as in specific SharePoint files</p> Navigating the Extending Copilot labs (A Path) <ul> <li>Lab A0 - Prerequisites</li> <li>Lab A1 - Declarative Copilot</li> <li>Lab A2 - First API Plugin</li> <li>Lab A3 - Enhance the API Plugin </li> <li>Lab A4 - Add Adaptive Cards</li> <li>Lab A5 - Add a Declarative Copilot</li> <li>Lab A6 - Add authentication (\ud83d\udccdYou are here)</li> </ul>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#work-in-progress","title":"WORK IN PROGRESS","text":""}]}